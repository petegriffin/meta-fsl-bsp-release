From 4d50e15f6199b052720465f7747db7488f948208 Mon Sep 17 00:00:00 2001
From: ming_qian <ming.qian@nxp.com>
Date: Thu, 11 Jul 2019 09:31:59 +0800
Subject: [PATCH 17/52] MLK-22250: VPU Decoder: get seq info from event data
 instead of rpc memory

There is rick getting seq info from rpc
It is also compatible with previous practices

Signed-off-by: ming_qian <ming.qian@nxp.com>
Reviewed-by: Shijie Qin <shijie.qin@nxp.com>
---
 drivers/mxc/vpu_malone/vpu_b0.c | 167 ++++++++++++++++++--------------
 drivers/mxc/vpu_malone/vpu_b0.h |   2 +-
 2 files changed, 97 insertions(+), 72 deletions(-)

diff --git a/drivers/mxc/vpu_malone/vpu_b0.c b/drivers/mxc/vpu_malone/vpu_b0.c
index 8fa1c8af9ac4..752d3a09fa41 100644
--- a/drivers/mxc/vpu_malone/vpu_b0.c
+++ b/drivers/mxc/vpu_malone/vpu_b0.c
@@ -707,18 +707,18 @@ static int v4l2_ioctl_enum_fmt_vid_out_mplane(struct file *file,
 
 static bool is_10bit_format(struct vpu_ctx *ctx)
 {
-	WARN_ON(!ctx || !ctx->pSeqinfo);
-	if (ctx->pSeqinfo->uBitDepthLuma > 8)
+	WARN_ON(!ctx);
+	if (ctx->seqinfo.uBitDepthLuma > 8)
 		return true;
-	if (ctx->pSeqinfo->uBitDepthChroma > 8)
+	if (ctx->seqinfo.uBitDepthChroma > 8)
 		return true;
 	return false;
 }
 
 static void calculate_frame_size(struct vpu_ctx *ctx)
 {
-	u_int32 width = ctx->pSeqinfo->uHorDecodeRes;
-	u_int32 height = ctx->pSeqinfo->uVerDecodeRes;
+	u_int32 width = ctx->seqinfo.uHorDecodeRes;
+	u_int32 height = ctx->seqinfo.uVerDecodeRes;
 	u_int32 luma_size;
 	u_int32 chroma_size;
 	u_int32 chroma_height;
@@ -734,7 +734,7 @@ static void calculate_frame_size(struct vpu_ctx *ctx)
 	q_data->stride = width;
 
 	height = ((height + uVertAlign) & ~uVertAlign);
-	if (ctx->pSeqinfo->uProgressive)
+	if (ctx->seqinfo.uProgressive)
 		chroma_height = height >> 1;
 	else
 		chroma_height = height;
@@ -757,7 +757,7 @@ static int v4l2_ioctl_g_fmt(struct file *file,
 	vpu_dbg(LVL_BIT_FUNC, "%s()\n", __func__);
 
 	if (f->type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
-		MediaIPFW_Video_SeqInfo *info = ctx->pSeqinfo;
+		MediaIPFW_Video_SeqInfo *info = &ctx->seqinfo;
 
 		q_data = &ctx->q_data[V4L2_DST];
 		if (is_10bit_format(ctx))
@@ -768,8 +768,8 @@ static int v4l2_ioctl_g_fmt(struct file *file,
 		pix_mp->height = q_data->height;
 		down(&q_data->drv_q_lock);
 		if (!ctx->b_firstseq && info->uHorRes && info->uVerRes) {
-			pix_mp->width = ctx->pSeqinfo->uHorRes;
-			pix_mp->height = ctx->pSeqinfo->uVerRes;
+			pix_mp->width = ctx->seqinfo.uHorRes;
+			pix_mp->height = ctx->seqinfo.uVerRes;
 		}
 		if (info->uProgressive == 1)
 			pix_mp->field = V4L2_FIELD_NONE;
@@ -1631,10 +1631,10 @@ static int vpu_dec_v4l2_ioctl_g_selection(struct file *file, void *fh,
 	if (s->target != V4L2_SEL_TGT_CROP && s->target != V4L2_SEL_TGT_COMPOSE)
 		return -EINVAL;
 
-	s->r.left = ctx->pSeqinfo->uFrameCropLeftOffset;
-	s->r.top = ctx->pSeqinfo->uFrameCropTopOffset;
-	s->r.width = ctx->pSeqinfo->uHorRes;
-	s->r.height = ctx->pSeqinfo->uVerRes;
+	s->r.left = ctx->seqinfo.uFrameCropLeftOffset;
+	s->r.top = ctx->seqinfo.uFrameCropTopOffset;
+	s->r.width = ctx->seqinfo.uHorRes;
+	s->r.height = ctx->seqinfo.uVerRes;
 
 	return 0;
 }
@@ -2084,19 +2084,19 @@ static int v4l2_custom_g_ctrl(struct v4l2_ctrl *ctrl)
 
 	switch (ctrl->id) {
 	case V4L2_CID_USER_FRAME_COLORDESC:
-		ctrl->val = ctx->pSeqinfo->uColorDesc;
+		ctrl->val = ctx->seqinfo.uColorDesc;
 		break;
 	case V4L2_CID_USER_FRAME_TRANSFERCHARS:
-		ctrl->val = ctx->pSeqinfo->uTransferChars;
+		ctrl->val = ctx->seqinfo.uTransferChars;
 		break;
 	case V4L2_CID_USER_FRAME_MATRIXCOEFFS:
-		ctrl->val = ctx->pSeqinfo->uMatrixCoeffs;
+		ctrl->val = ctx->seqinfo.uMatrixCoeffs;
 		break;
 	case V4L2_CID_USER_FRAME_FULLRANGE:
-		ctrl->val = ctx->pSeqinfo->uVideoFullRangeFlag;
+		ctrl->val = ctx->seqinfo.uVideoFullRangeFlag;
 		break;
 	case V4L2_CID_USER_FRAME_VUIPRESENT:
-		ctrl->val = ctx->pSeqinfo->uVUIPresent;
+		ctrl->val = ctx->seqinfo.uVUIPresent;
 		break;
 	default:
 		vpu_err("%s() Invalid costomer control(%d)\n",
@@ -2118,7 +2118,7 @@ static int v4l2_dec_g_v_ctrl(struct v4l2_ctrl *ctrl)
 
 	switch (ctrl->id) {
 	case V4L2_CID_MIN_BUFFERS_FOR_CAPTURE:
-		ctrl->val = ctx->pSeqinfo->uNumDPBFrms + ctx->pSeqinfo->uNumRefFrms;
+		ctrl->val = ctx->seqinfo.uNumDPBFrms + ctx->seqinfo.uNumRefFrms;
 		break;
 	default:
 		vpu_err("%s() Invalid control(%d)\n",
@@ -3378,8 +3378,8 @@ static void report_buffer_done(struct vpu_ctx *ctx, void *frame_info)
 	bool b10BitFormat = is_10bit_format(ctx);
 	int buffer_id;
 
-	vpu_dbg(LVL_BIT_FUNC, "%s() fs_id=%d, ulFsLumaBase[0]=%x, stride=%d, b10BitFormat=%d, ctx->pSeqinfo->uBitDepthLuma=%d\n",
-			__func__, fs_id, FrameInfo[1], stride, b10BitFormat, ctx->pSeqinfo->uBitDepthLuma);
+	vpu_dbg(LVL_BIT_FUNC, "%s() fs_id=%d, ulFsLumaBase[0]=%x, stride=%d, b10BitFormat=%d, ctx->seqinfo.uBitDepthLuma=%d\n",
+			__func__, fs_id, FrameInfo[1], stride, b10BitFormat, ctx->seqinfo.uBitDepthLuma);
 	v4l2_update_stream_addr(ctx, 0);
 
 	buffer_id = find_buffer_id(ctx, FrameInfo[1]);
@@ -3645,7 +3645,7 @@ static void respond_req_frame_abnormal(struct vpu_ctx *ctx)
 		return;
 
 	memset(local_cmddata, 0, sizeof(local_cmddata));
-	local_cmddata[0] = (ctx->pSeqinfo->uActiveSeqTag + 0xf0)<<24;
+	local_cmddata[0] = (ctx->seqinfo.uActiveSeqTag + 0xf0)<<24;
 	local_cmddata[6] = MEDIAIP_FRAME_REQ;
 	v4l2_vpu_send_cmd(ctx, ctx->str_index,
 			VID_API_CMD_FS_ALLOC, 7, local_cmddata);
@@ -3671,7 +3671,7 @@ static bool alloc_frame_buffer(struct vpu_ctx *ctx,
 	vpu_dbg(LVL_INFO, "%s() :LumaAddr(%llx) ChromaAddr(%llx) buf_id (%d)\n",
 			__func__, LumaAddr, ChromaAddr, p_data_req->id);
 
-	p_data_req->seq_tag = ctx->pSeqinfo->uActiveSeqTag;
+	p_data_req->seq_tag = ctx->seqinfo.uActiveSeqTag;
 	memset(local_cmddata, 0, sizeof(local_cmddata));
 	local_cmddata[0] = p_data_req->id | (p_data_req->seq_tag << 24);
 	local_cmddata[1] = LumaAddr;
@@ -3742,6 +3742,47 @@ static void release_frame_buffer(struct vpu_ctx *ctx,
 	set_data_req_status(p_data_req, FRAME_ALLOC);
 }
 
+static void get_seq_info(MediaIPFW_Video_SeqInfo *pSeqInfo,
+			u32 *event_data,
+			MediaIPFW_Video_SeqInfo *pRpcSeqInfo)
+{
+	memset(pSeqInfo, 0, sizeof(*pSeqInfo));
+
+	if (event_data && event_data[0]) {
+		pSeqInfo->uNumRefFrms = event_data[0];
+		pSeqInfo->uNumDPBFrms = event_data[1];
+		pSeqInfo->uNumDFEAreas = event_data[2];
+		pSeqInfo->uProgressive = event_data[3];
+		pSeqInfo->uVerRes = event_data[4];
+		pSeqInfo->uHorRes = event_data[5];
+		pSeqInfo->uParWidth = event_data[6];
+		pSeqInfo->uParHeight = event_data[7];
+		pSeqInfo->FrameRate = event_data[8];
+		pSeqInfo->UDispAspRatio = event_data[9];
+		pSeqInfo->uLevelIDC = event_data[10];
+		pSeqInfo->uVerDecodeRes = event_data[11];
+		pSeqInfo->uHorDecodeRes = event_data[12];
+		pSeqInfo->uBitDepthLuma = event_data[13];
+		pSeqInfo->uBitDepthChroma = event_data[14];
+		pSeqInfo->uChromaFmt = event_data[15];
+		pSeqInfo->uColorDesc = event_data[16];
+		pSeqInfo->uTransferChars = event_data[17];
+		pSeqInfo->uMatrixCoeffs = event_data[18];
+		pSeqInfo->uVideoFullRangeFlag = event_data[19];
+		pSeqInfo->uVUIPresent = event_data[20];
+		pSeqInfo->uMVCNumViews = event_data[21];
+		pSeqInfo->uFrameCropValid = event_data[22];
+		pSeqInfo->uFrameCropLeftOffset = event_data[23];
+		pSeqInfo->uFrameCropRightOffset = event_data[24];
+		pSeqInfo->uFrameCropTopOffset = event_data[25];
+		pSeqInfo->uFrameCropBottomOffset = event_data[25];
+		pSeqInfo->uActiveSeqTag = event_data[27];
+		return;
+	}
+
+	memcpy(pSeqInfo, pRpcSeqInfo, sizeof(*pSeqInfo));
+}
+
 static bool check_seq_info_is_valid(u32 ctx_id, MediaIPFW_Video_SeqInfo *info)
 {
 	if (!info)
@@ -3829,7 +3870,7 @@ static void vpu_api_event_handler(struct vpu_ctx *ctx, u_int32 uStrIdx, u_int32
 		down(&ctx->q_data[V4L2_DST].drv_q_lock);
 		respond_req_frame(ctx, &ctx->q_data[V4L2_DST], true);
 		reset_mbi_dcp_count(ctx);
-		memset(ctx->pSeqinfo, 0, sizeof(MediaIPFW_Video_SeqInfo));
+		memset(&ctx->seqinfo, 0, sizeof(MediaIPFW_Video_SeqInfo));
 		ctx->q_data[V4L2_DST].sizeimage[0] = 0;
 		ctx->q_data[V4L2_DST].sizeimage[1] = 0;
 		up(&ctx->q_data[V4L2_DST].drv_q_lock);
@@ -3904,7 +3945,7 @@ static void vpu_api_event_handler(struct vpu_ctx *ctx, u_int32 uStrIdx, u_int32
 			vpu_err("error: buffer(%d) need to set FRAME_DECODED, but previous state %s is not FRAME_FREE\n",
 					buffer_id, bufstat[ctx->q_data[V4L2_DST].vb2_reqs[buffer_id].status]);
 		set_data_req_status(p_data_req, FRAME_DECODED);
-		if (ctx->pSeqinfo->uProgressive == 1)
+		if (ctx->seqinfo.uProgressive == 1)
 			p_data_req->bfield = false;
 		else
 			p_data_req->bfield = true;
@@ -3919,22 +3960,18 @@ static void vpu_api_event_handler(struct vpu_ctx *ctx, u_int32 uStrIdx, u_int32
 		break;
 	case VID_API_EVENT_SEQ_HDR_FOUND: {
 		MediaIPFW_Video_SeqInfo *pSeqInfo = (MediaIPFW_Video_SeqInfo *)dev->shared_mem.seq_mem_vir;
+		MediaIPFW_Video_SeqInfo info;
 //		MediaIPFW_Video_FrameBuffer *pStreamFrameBuffer = &pSharedInterface->StreamFrameBuffer[uStrIdx];
 //		MediaIPFW_Video_FrameBuffer *pStreamDCPBuffer = &pSharedInterface->StreamDCPBuffer[uStrIdx];
 		MediaIPFW_Video_PitchInfo   *pStreamPitchInfo = &pSharedInterface->StreamPitchInfo[uStrIdx];
 		unsigned int num = pSharedInterface->SeqInfoTabDesc.uNumSizeDescriptors;
 		int wait_times = 0;
 
-		if (!check_seq_info_is_valid(ctx->str_index, &pSeqInfo[ctx->str_index]))
+		get_seq_info(&info, event_data, &pSeqInfo[ctx->str_index]);
+		if (!check_seq_info_is_valid(ctx->str_index, &info))
 			break;
 		if (ctx->wait_rst_done)
 			break;
-		if (ctx->pSeqinfo == NULL) {
-			ctx->pSeqinfo = kzalloc(sizeof(MediaIPFW_Video_SeqInfo), GFP_KERNEL);
-			atomic64_add(sizeof(MediaIPFW_Video_SeqInfo), &ctx->statistic.total_alloc_size);
-		}
-		else
-			vpu_dbg(LVL_INFO, "pSeqinfo is not NULL, need not to realloc\n");
 
 		while (ctx->wait_res_change_done && wait_times++ < 100)
 			mdelay(10);
@@ -3944,22 +3981,22 @@ static void vpu_api_event_handler(struct vpu_ctx *ctx, u_int32 uStrIdx, u_int32
 
 		down(&ctx->q_data[V4L2_DST].drv_q_lock);
 		respond_req_frame(ctx, &ctx->q_data[V4L2_DST], true);
-		memcpy(ctx->pSeqinfo, &pSeqInfo[ctx->str_index], sizeof(MediaIPFW_Video_SeqInfo));
+		memcpy(&ctx->seqinfo, &info, sizeof(MediaIPFW_Video_SeqInfo));
 		up(&ctx->q_data[V4L2_DST].drv_q_lock);
 
 		calculate_frame_size(ctx);
-		parse_frame_interval_from_seqinfo(ctx, ctx->pSeqinfo);
+		parse_frame_interval_from_seqinfo(ctx, &ctx->seqinfo);
 		vpu_dbg(LVL_BIT_FLOW, "ctx[%d] SEQINFO GET: uHorRes:%d uVerRes:%d uHorDecodeRes:%d uVerDecodeRes:%d uNumDPBFrms:%d, num:%d, uNumRefFrms:%d, uNumDFEAreas:%d\n",
 				ctx->str_index,
-				ctx->pSeqinfo->uHorRes, ctx->pSeqinfo->uVerRes,
-				ctx->pSeqinfo->uHorDecodeRes, ctx->pSeqinfo->uVerDecodeRes,
-				ctx->pSeqinfo->uNumDPBFrms, num, ctx->pSeqinfo->uNumRefFrms, ctx->pSeqinfo->uNumDFEAreas);
+				ctx->seqinfo.uHorRes, ctx->seqinfo.uVerRes,
+				ctx->seqinfo.uHorDecodeRes, ctx->seqinfo.uVerDecodeRes,
+				ctx->seqinfo.uNumDPBFrms, num, ctx->seqinfo.uNumRefFrms, ctx->seqinfo.uNumDFEAreas);
 		vpu_dbg(LVL_BIT_FLOW, "uColorDesc = %d, uTransferChars = %d, uMatrixCoeffs = %d, uVideoFullRangeFlag = %d, uVUIPresent = %d\n",
-				ctx->pSeqinfo->uColorDesc,
-				ctx->pSeqinfo->uTransferChars,
-				ctx->pSeqinfo->uMatrixCoeffs,
-				ctx->pSeqinfo->uVideoFullRangeFlag,
-				ctx->pSeqinfo->uVUIPresent);
+				ctx->seqinfo.uColorDesc,
+				ctx->seqinfo.uTransferChars,
+				ctx->seqinfo.uMatrixCoeffs,
+				ctx->seqinfo.uVideoFullRangeFlag,
+				ctx->seqinfo.uVUIPresent);
 		ctx->mbi_size = get_mbi_size(&ctx->q_data[V4L2_DST]);
 		if (ctx->b_firstseq) {
 			down(&ctx->q_data[V4L2_DST].drv_q_lock);
@@ -3988,7 +4025,7 @@ static void vpu_api_event_handler(struct vpu_ctx *ctx, u_int32 uStrIdx, u_int32
 			if (alloc_dcp_buffer(ctx, ctx->dcp_count))
 				break;
 
-			local_cmddata[0] = ctx->dcp_count | (ctx->pSeqinfo->uActiveSeqTag<<24);
+			local_cmddata[0] = ctx->dcp_count | (ctx->seqinfo.uActiveSeqTag<<24);
 			local_cmddata[1] = ctx->dcp_buffer[ctx->dcp_count].dma_phy;
 			local_cmddata[2] = DCP_SIZE;
 			local_cmddata[3] = 0;
@@ -4003,7 +4040,7 @@ static void vpu_api_event_handler(struct vpu_ctx *ctx, u_int32 uStrIdx, u_int32
 			if (alloc_mbi_buffer(ctx, ctx->mbi_count))
 				break;
 
-			local_cmddata[0] = ctx->mbi_count | (ctx->pSeqinfo->uActiveSeqTag<<24);
+			local_cmddata[0] = ctx->mbi_count | (ctx->seqinfo.uActiveSeqTag<<24);
 			local_cmddata[1] = ctx->mbi_buffer[ctx->mbi_count].dma_phy;
 			local_cmddata[2] = ctx->mbi_buffer[ctx->mbi_count].dma_size;
 			local_cmddata[3] = 0;
@@ -4157,8 +4194,9 @@ static void vpu_api_event_handler(struct vpu_ctx *ctx, u_int32 uStrIdx, u_int32
 		ctx->mbi_size = get_mbi_size(This);
 		reset_frame_buffer(ctx);
 		up(&This->drv_q_lock);
-		vpu_dbg(LVL_INFO, "warning: ctx[%d] VID_API_EVENT_RES_CHANGE, seq id: %d\n",
-				ctx->str_index, ctx->pSeqinfo->uActiveSeqTag);
+		vpu_dbg(LVL_INFO,
+			"warning: ctx[%d] RES_CHANGE event, seq id: %d\n",
+			ctx->str_index, ctx->seqinfo.uActiveSeqTag);
 		vpu_log_buffer_state(ctx);
 		ctx->wait_res_change_done = true;
 		send_source_change_event(ctx);
@@ -4327,12 +4365,6 @@ static void release_vpu_ctx(struct vpu_ctx *ctx)
 	release_queue_data(ctx);
 	free_decoder_buffer(ctx);
 	destroy_log_info_queue(ctx);
-	if (ctx->pSeqinfo) {
-		kfree(ctx->pSeqinfo);
-		ctx->pSeqinfo = NULL;
-		atomic64_sub(sizeof(MediaIPFW_Video_SeqInfo),
-				&ctx->statistic.total_alloc_size);
-	}
 
 	if (atomic64_read(&ctx->statistic.total_alloc_size) != 0)
 		vpu_err("error: memory leak for vpu kalloc buffer\n");
@@ -4479,8 +4511,10 @@ static void vpu_msg_instance_work(struct work_struct *work)
 
 	memset(&msg, 0, sizeof(struct event_msg));
 
-	while (receive_msg_queue(ctx, &msg))
+	while (receive_msg_queue(ctx, &msg)) {
 		vpu_api_event_handler(ctx, msg.idx, msg.msgid, msg.msgdata);
+		memset(&msg, 0, sizeof(struct event_msg));
+	}
 }
 
 static int vpu_queue_setup(struct vb2_queue *vq,
@@ -5076,13 +5110,13 @@ static ssize_t show_instance_buffer_info(struct device *dev,
 	num += scnprintf(buf + num, PAGE_SIZE - num,
 			"\t%40s: %dx%d(%dx%d), %d(DPB), %d(Ref), %d(DFE)\n",
 			"seqinfo",
-			ctx->pSeqinfo->uHorRes,
-			ctx->pSeqinfo->uVerRes,
-			ctx->pSeqinfo->uHorDecodeRes,
-			ctx->pSeqinfo->uVerDecodeRes,
-			ctx->pSeqinfo->uNumDPBFrms,
-			ctx->pSeqinfo->uNumRefFrms,
-			ctx->pSeqinfo->uNumDFEAreas);
+			ctx->seqinfo.uHorRes,
+			ctx->seqinfo.uVerRes,
+			ctx->seqinfo.uHorDecodeRes,
+			ctx->seqinfo.uVerDecodeRes,
+			ctx->seqinfo.uNumDPBFrms,
+			ctx->seqinfo.uNumRefFrms,
+			ctx->seqinfo.uNumDFEAreas);
 
 	return num;
 }
@@ -5459,13 +5493,7 @@ static int v4l2_open(struct file *filp)
 		if (ret)
 			goto err_open_crc;
 	}
-	ctx->pSeqinfo = kzalloc(sizeof(MediaIPFW_Video_SeqInfo), GFP_KERNEL);
-	if (!ctx->pSeqinfo) {
-		ret = -ENOMEM;
-		goto err_alloc_seq;
-	}
-	atomic64_add(sizeof(MediaIPFW_Video_SeqInfo), &ctx->statistic.total_alloc_size);
-	ctx->pSeqinfo->uProgressive = 1;
+	ctx->seqinfo.uProgressive = 1;
 
 	init_queue_data(ctx);
 	init_log_info_queue(ctx);
@@ -5502,10 +5530,7 @@ static int v4l2_open(struct file *filp)
 err_firmware_load:
 	destroy_log_info_queue(ctx);
 	release_queue_data(ctx);
-	kfree(ctx->pSeqinfo);
-	ctx->pSeqinfo = NULL;
-	atomic64_sub(sizeof(MediaIPFW_Video_SeqInfo), &ctx->statistic.total_alloc_size);
-err_alloc_seq:
+
 	if (vpu_frmcrcdump_ena)
 		close_crc_file(ctx);
 err_open_crc:
diff --git a/drivers/mxc/vpu_malone/vpu_b0.h b/drivers/mxc/vpu_malone/vpu_b0.h
index 97c4f72ced25..119368c1d21c 100644
--- a/drivers/mxc/vpu_malone/vpu_b0.h
+++ b/drivers/mxc/vpu_malone/vpu_b0.h
@@ -344,7 +344,7 @@ struct vpu_ctx {
 	struct completion completion;
 	struct completion stop_cmp;
 	struct completion eos_cmp;
-	MediaIPFW_Video_SeqInfo *pSeqinfo;
+	MediaIPFW_Video_SeqInfo seqinfo;
 	bool b_dis_reorder;
 	bool b_firstseq;
 	bool start_flag;
-- 
2.17.1

