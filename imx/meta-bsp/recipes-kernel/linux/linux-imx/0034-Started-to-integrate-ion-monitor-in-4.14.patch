From db38b34a759b5a43512125281527222a185d0529 Mon Sep 17 00:00:00 2001
From: Axel Le Bourhis <axel.lebourhis@nxp.com>
Date: Wed, 27 Feb 2019 11:04:02 +0100
Subject: [PATCH 34/52] Started to integrate ion monitor in 4.14

Added debugfs to ion heaps.
Debug files can be found in /sys/kernel/debug/ion/
Atm, these files doesn't give information, as debug function are empty.

Also added dts file for imx8mm-ddr4-evk to be used with drm.
Updated Makefile to build new dtb for imx8mm-ddr4-evk.
---
 arch/arm64/boot/dts/freescale/Makefile        |   1 +
 .../dts/freescale/fsl-imx8mm-ddr4-evk-drm.dts |  41 ++++++
 drivers/staging/android/ion/ion.c             |  36 +++++
 drivers/staging/android/ion/ion.h             |  12 ++
 .../staging/android/ion/ion_unmapped_heap.c   | 136 +++++++++++++++++-
 include/linux/genalloc.h                      |  16 +++
 lib/genalloc.c                                |  68 +++++++++
 7 files changed, 308 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm64/boot/dts/freescale/fsl-imx8mm-ddr4-evk-drm.dts

diff --git a/arch/arm64/boot/dts/freescale/Makefile b/arch/arm64/boot/dts/freescale/Makefile
index cc3279887850..be4c42edf841 100644
--- a/arch/arm64/boot/dts/freescale/Makefile
+++ b/arch/arm64/boot/dts/freescale/Makefile
@@ -125,6 +125,7 @@ dtb-$(CONFIG_ARCH_FSL_IMX8MM) += fsl-imx8mm-evk.dtb \
 				 fsl-imx8mm-evk-audio-tdm.dtb \
 				 fsl-imx8mm-ddr3l-val.dtb \
 				 fsl-imx8mm-ddr4-evk.dtb \
+				 fsl-imx8mm-ddr4-evk-drm.dtb \
 				 fsl-imx8mm-ddr4-val.dtb \
 				 fsl-imx8mm-evk-rm67191.dtb \
 				 fsl-imx8mm-evk-root.dtb \
diff --git a/arch/arm64/boot/dts/freescale/fsl-imx8mm-ddr4-evk-drm.dts b/arch/arm64/boot/dts/freescale/fsl-imx8mm-ddr4-evk-drm.dts
new file mode 100644
index 000000000000..ac24cc474ea3
--- /dev/null
+++ b/arch/arm64/boot/dts/freescale/fsl-imx8mm-ddr4-evk-drm.dts
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2017 NXP
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include "fsl-imx8mm-ddr4-evk.dts"
+
+&resmem {
+	display_region: display {
+		compatible = "imx-secure-ion-pool";
+		reg = <0x0 0xB8400000 0 0x05C00000>;
+	};
+
+	optee_region: optee {
+		compatible = "imx-secure-ion-pool";
+		reg = <0x0 0xB6000000 0 0x02000000>;
+	};
+};
+
+&imx_ion {
+	compatible = "fsl,mxc-ion", "linux,ion";
+
+	ion-display-region {
+		compatible = "fsl,display-heap", "linux,ion-heap-unmapped";
+		memory-region = <&display_region>;
+	};
+
+	ion-optee-region {
+		compatible = "fsl,optee-heap", "linux,ion-heap-unmapped";
+		memory-region = <&optee_region>;
+	};
+};
diff --git a/drivers/staging/android/ion/ion.c b/drivers/staging/android/ion/ion.c
index ed0ccf167af9..e4b6cb0e62ea 100644
--- a/drivers/staging/android/ion/ion.c
+++ b/drivers/staging/android/ion/ion.c
@@ -572,6 +572,29 @@ static int debug_shrink_get(void *data, u64 *val)
 DEFINE_SIMPLE_ATTRIBUTE(debug_shrink_fops, debug_shrink_get,
 			debug_shrink_set, "%llu\n");
 
+static int ion_heap_debug_show(struct seq_file *s, void *unused)
+{
+	struct ion_heap *heap = s->private;
+	struct ion_device *dev = heap->dev;
+	seq_puts(s, "\n----- ION HEAP DEBUG SHOW -----\n");
+	if(heap->debug_show)
+		heap->debug_show(heap, s, unused);
+
+	return 0;
+}
+
+static int ion_heap_debug_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, ion_heap_debug_show, inode->i_private);
+}
+
+static const struct file_operations ion_heap_debug_fops = {
+	.open           = ion_heap_debug_open,
+	.read           = seq_read,
+	.llseek         = seq_lseek,
+	.release        = single_release,
+};
+
 void ion_device_add_heap(struct ion_heap *heap)
 {
 	struct dentry *debug_file;
@@ -600,6 +623,17 @@ void ion_device_add_heap(struct ion_heap *heap)
 	plist_node_init(&heap->node, -heap->id);
 	plist_add(&heap->node, &dev->heaps);
 
+	debug_file = debugfs_create_file(heap->name, 0664, 
+	                                 dev->debug_root, heap,
+	                                 &ion_heap_debug_fops);
+	if (!debug_file) {
+        char buf[256], *path;
+        
+        path = dentry_path(dev->debug_root, buf, 256);
+        pr_err("Failed to create heap debugfs at %s/%s\n",
+               path, heap->name);
+    }
+
 	if (heap->shrinker.count_objects && heap->shrinker.scan_objects) {
 		char debug_name[64];
 
@@ -656,3 +690,5 @@ static int ion_device_create(void)
 	return 0;
 }
 subsys_initcall(ion_device_create);
+
+
diff --git a/drivers/staging/android/ion/ion.h b/drivers/staging/android/ion/ion.h
index 621e5f7ceacb..4f136a7b78f1 100644
--- a/drivers/staging/android/ion/ion.h
+++ b/drivers/staging/android/ion/ion.h
@@ -358,4 +358,16 @@ long ion_ioctl(struct file *filp, unsigned int cmd, unsigned long arg);
 
 int ion_query_heaps(struct ion_heap_query *query);
 
+#ifdef CONFIG_ION_MONITOR
+enum meta_name {
+	HEAP_SIZE,
+	FREE_SIZE,
+	ALLOCATED_SIZE,
+	ALLOC_PEAK,
+	LARGEST_FREE_BUF,
+};
+
+size_t get_unmapped_heap_meta(struct ion_heap *heap, int name);
+#endif /* CONFIG_ION_MONITOR */
+
 #endif /* _ION_H */
diff --git a/drivers/staging/android/ion/ion_unmapped_heap.c b/drivers/staging/android/ion/ion_unmapped_heap.c
index a86257f74388..adffaa177380 100644
--- a/drivers/staging/android/ion/ion_unmapped_heap.c
+++ b/drivers/staging/android/ion/ion_unmapped_heap.c
@@ -233,6 +233,14 @@ static struct ion_heap_ops unmapped_heap_ops = {
 	return &umh->heap;
 }*/
 
+static int ion_unmapped_heap_debug_show(struct ion_heap *heap, struct seq_file *s, void *unused)
+{
+	struct ion_device *dev = heap->dev;
+	seq_puts(s, "\n----- ION UNMAPPED HEAP DEBUG SHOW -----\n");
+	
+	return 0;
+}
+
 struct ion_heap *ion_unmapped_heap_create(struct rmem_unmapped *heap_data)
 {
 	struct ion_unmapped_heap *unmapped_heap;
@@ -253,7 +261,12 @@ struct ion_heap *ion_unmapped_heap_create(struct rmem_unmapped *heap_data)
 		return ERR_PTR(-ENOMEM);
 
 	// ensure memory address align to 64K which can meet VPU requirement.
+	#ifdef CONFIG_ION_MONITOR
+	unmapped_heap->pool = gen_pool_meta_create(PAGE_SHIFT+4, -1);
+	#else
 	unmapped_heap->pool = gen_pool_create(PAGE_SHIFT+4, -1);
+	#endif /* CONFIG_ION_MONITOR */
+
 	if (!unmapped_heap->pool) {
 		kfree(unmapped_heap);
 		return ERR_PTR(-ENOMEM);
@@ -262,10 +275,20 @@ struct ion_heap *ion_unmapped_heap_create(struct rmem_unmapped *heap_data)
 	unmapped_heap->size = size;
 	gen_pool_add(unmapped_heap->pool, unmapped_heap->base, heap_data->size,
 		     -1);
+	
+	#ifdef CONFIG_ION_MONITOR
+	struct gen_pool_meta *meta = 
+		container_of(unmapped_heap->pool, struct gen_pool_meta, pool);
+	set_meta(meta, HEAP_SIZE, heap_data->size);
+	set_meta(meta, LARGEST_FREE_BUF, heap_data->size);
+	set_meta(meta, FREE_SIZE, heap_data->size);
+	#endif /* CONFIG_ION_MONITOR */
+
 	unmapped_heap->heap.ops = &unmapped_heap_ops;
 	unmapped_heap->heap.type = ION_HEAP_TYPE_UNMAPPED;
 	unmapped_heap->heap.flags = ION_HEAP_FLAG_DEFER_FREE;
 	unmapped_heap->heap.name = heap_data->name;
+	unmapped_heap->heap.debug_show = ion_unmapped_heap_debug_show;
 
 	return &unmapped_heap->heap;
 }
@@ -292,9 +315,14 @@ static int ion_add_unmapped_heap(void)
 void ion_unmapped_heap_destroy(struct ion_heap *heap)
 {
 	struct ion_unmapped_heap *umh =
-	     container_of(heap, struct  ion_unmapped_heap, heap);
-
+	    container_of(heap, struct  ion_unmapped_heap, heap);
+	#ifdef CONFIG_ION_MONITOR
+	struct gen_pool_meta *meta =
+		container_of(umh->pool, struct gen_pool_meta, pool);
+	gen_pool_meta_destroy(meta);
+	#else     
 	gen_pool_destroy(umh->pool);
+	#endif /* CONFIG_ION_MONITOR */
 	kfree(umh);
 	umh = NULL;
 }
@@ -335,6 +363,110 @@ static int __init rmem_unmapped_setup(struct reserved_mem *rmem)
 	}
 }
 
+#ifdef CONFIG_ION_MONITOR
+/**
+ *  get_unmapped_heap_meta - get a metadata value
+ *  @heap: pointer to ion heap
+ *  @name: name of the metadata to read
+ *
+ *  returns the requested metadata value
+ */
+size_t get_unmapped_heap_meta(struct ion_heap *heap, int name)
+{
+	struct ion_unmapped_heap *unmapped_heap = 
+		container_of(heap, ion_unmapped_heap, heap);
+	struct gen_pool_meta *meta = 
+		container_of(unmapped_heap->pool, struct gen_pool_meta, pool);
+	return get_meta(meta, name);
+}
+
+/**
+ * get_meta - get a metadata value
+ * @meta: pointer to gen_pool_meta struct
+ * @name: name of the metadata to read
+ *
+ * returns the requested metadata value
+ */
+static size_t get_meta(struct gen_pool_meta *meta, int name) 
+{
+	size_t size;
+	switch(name) {
+		case HEAP_SIZE:
+			spin_lock(&meta->lock);
+			size = meta->heap_size;
+			spin_unlock(&meta->lock);
+			break;
+		case FREE_SIZE:
+			spin_lock(&meta->lock);
+			size = meta->free_size;
+			spin_unlock(&meta->lock);
+			break;
+		case ALLOCATED_SIZE:
+			spin_lock(&meta->lock);
+			size = meta->allocated_size;
+			spin_unlock(&meta->lock);
+			break;
+		case ALLOC_PEAK:
+			spin_lock(&meta->lock);
+			size = meta->alloc_peak;
+			spin_unlock(&meta->lock);
+			break;
+		case LARGEST_FREE_BUF:
+			spin_lock(&meta->lock);
+			size = meta->largest_free_buf;
+			spin_unlock(&meta->lock);
+			break;
+		default:
+			pr_err("%s: Invalid metadata name %d\n", __func__,
+					name);
+			return NULL;
+	}
+	return size;
+}
+
+/**
+ * set_meta - set a metadata value
+ * @meta: pointer to gen_pool_meta struct
+ * @name: name of the metadata to modify
+ * @size: value to set to the metadata
+ *
+ */
+static void set_meta(struct gen_pool_meta *meta, int name, size_t size) 
+{
+	switch(name) {
+		case HEAP_SIZE:
+			spin_lock(&meta->lock);
+			meta->heap_size = size;
+			spin_unlock(&meta->lock);
+			break;
+		case FREE_SIZE:
+			spin_lock(&meta->lock);
+			meta->free_size = size;
+			spin_unlock(&meta->lock);
+			break;
+		case ALLOCATED_SIZE:
+			spin_lock(&meta->lock);
+			meta->allocated_size = size;
+			spin_unlock(&meta->lock);
+			break;
+		case ALLOC_PEAK:
+			spin_lock(&meta->lock);
+			meta->alloc_peak = size;
+			spin_unlock(&meta->lock);
+			break;
+		case LARGEST_FREE_BUF:
+			spin_lock(&meta->lock);
+			meta->largest_free_buf = size;
+			spin_unlock(&meta->lock);
+			break;
+		default:
+			pr_err("%s: Invalid metadata name %d\n", __func__,
+					name);
+			return NULL;
+	}
+}
+#endif /* CONFIG_ION_MONITOR */
+
 RESERVEDMEM_OF_DECLARE(unmapped, "imx-secure-ion-pool", rmem_unmapped_setup);
 
 device_initcall(ion_add_unmapped_heap);
diff --git a/include/linux/genalloc.h b/include/linux/genalloc.h
index 872f930f1b06..46ca4982e77f 100644
--- a/include/linux/genalloc.h
+++ b/include/linux/genalloc.h
@@ -67,6 +67,22 @@ struct gen_pool {
 	const char *name;
 };
 
+#ifdef CONFIG_ION_MONITOR
+/*
+ *  Metadata for General purpose special memory pool descriptor.
+ */
+struct gen_pool_meta { 
+	spinlock_t lock;
+	struct gen_pool pool;
+	size_t heap_size;
+	size_t free_size;
+	size_t allocated_size;	
+	size_t largest_free_buf;
+	size_t alloc_peak;
+	genpool_algo_t algo;
+};
+#endif /* CONFIG_ION_MONITOR
+
 /*
  *  General purpose special memory pool chunk descriptor.
  */
diff --git a/lib/genalloc.c b/lib/genalloc.c
index ca06adc4f445..0b32e964deda 100644
--- a/lib/genalloc.c
+++ b/lib/genalloc.c
@@ -166,6 +166,43 @@ struct gen_pool *gen_pool_create(int min_alloc_order, int nid)
 }
 EXPORT_SYMBOL(gen_pool_create);
 
+#ifdef CONFIG_ION_MONITOR
+/**
+ * gen_pool__meta_create - create a new special memory pool wrapped by a 
+ * metadata struct
+ * @min_alloc_order: log base 2 of number of bytes each bitmap bit represents
+ * @nid: node id of the node the pool structure should be allocated on, or -1
+ *
+ * Create a new special memory pool that can be used to manage special purpose
+ * memory not managed by the regular kmalloc/kfree interface.
+ * Also creates metadata structure.
+ */
+struct gen_pool *gen_pool_meta_create(int min_alloc_order, int nid)
+{
+	struct gen_pool_meta *meta;
+
+	meta = kmalloc_node(sizeof(struct gen_pool), GFP_KERNEL, nid);
+	if (meta != NULL) {
+		spin_lock_init(&meta->lock);
+		spin_lock_init(&(meta->pool.lock));
+		INIT_LIST_HEAD(&(meta->pool.chunks));
+		meta->pool.min_alloc_order = min_alloc_order;
+		meta->pool.algo = gen_pool_first_fit;
+		meta->pool.data = NULL;
+		meta->pool.name = NULL;
+		meta->alloc_peak = 0;
+		meta->allocated_size = 0;
+	}
+	else 
+	{
+		return ERR_PTR(-ENOMEM);
+	}
+	return &meta->pool;
+}
+EXPORT_SYMBOL(gen_pool_meta_create);
+#endif /* CONFIG_ION_MONITOR */ 
+
+
 /**
  * gen_pool_add_virt - add a new chunk of special memory to the pool
  * @pool: pool to add new memory chunk to
@@ -258,6 +295,37 @@ void gen_pool_destroy(struct gen_pool *pool)
 }
 EXPORT_SYMBOL(gen_pool_destroy);
 
+#ifdef CONFIG_ION_MONITOR
+/**
+ * gen_pool_meta_destroy - destroy a special memory pool and its metadata
+ * @meta: pool's metadata structure to destroy
+ *
+ * Destroy the specified special memory pool and its metadata. 
+ * Verifies that there are no outstanding allocations.
+ */
+void gen_pool_meta_destroy(struct gen_pool_meta *meta)
+{
+	struct list_head *_chunk, *_next_chunk;
+	struct gen_pool_chunk *chunk;
+	int order = meta->pool.min_alloc_order;
+	int bit, end_bit;
+
+	list_for_each_safe(_chunk, _next_chunk, &meta->pool.chunks) {
+		chunk = list_entry(_chunk, struct gen_pool_chunk, next_chunk);
+		list_del(&chunk->next_chunk);
+
+		end_bit = chunk_size(chunk) >> order;
+		bit = find_next_bit(chunk->bits, end_bit, 0);
+		BUG_ON(bit < end_bit);
+
+		kfree(chunk);
+	}
+	kfree_const(meta->pool.name);
+	kfree(meta);
+}
+EXPORT_SYMBOL(gen_pool_meta_destroy);
+#endif /* CONFIG_ION_MONITOR
+
 /**
  * gen_pool_alloc - allocate special memory from the pool
  * @pool: pool to allocate from
-- 
2.17.1

