From 91a17449e867ae616e997e9c8e8d6876fbf614c1 Mon Sep 17 00:00:00 2001
From: Olivier Masse <olivier.masse@nxp.com>
Date: Tue, 3 Sep 2019 11:36:26 +0200
Subject: [PATCH 41/52] MMIOT-192 VU hantro linux driver : Use OPTEE Kernel API

hantrodec driver :
- Use secure Hantro VPU PTA
- Support both VPU core
---
 drivers/mxc/hantro_845/Kconfig          |   3 +-
 drivers/mxc/hantro_845/hantrodec_845s.c | 252 +++++++++++++++++++-----
 2 files changed, 209 insertions(+), 46 deletions(-)

diff --git a/drivers/mxc/hantro_845/Kconfig b/drivers/mxc/hantro_845/Kconfig
index 6b59c33f91c6..aa7507e717c4 100755
--- a/drivers/mxc/hantro_845/Kconfig
+++ b/drivers/mxc/hantro_845/Kconfig
@@ -3,10 +3,11 @@
 #
 
 menu "MXC HANTRO(Video Processing Unit) 845 support"
-	depends on ARCH_FSL_IMX8MQ
+	depends on ARCH_FSL_IMX8MQ && TEE && OPTEE
 
 config MXC_HANTRO_845
 	tristate "Support for MXC HANTRO(Video Processing Unit) 845"
+	depends on TEE && OPTEE
 	default y
 	---help---
 	  VPU codec device.
diff --git a/drivers/mxc/hantro_845/hantrodec_845s.c b/drivers/mxc/hantro_845/hantrodec_845s.c
index 2bd424c5fed9..48806165c431 100755
--- a/drivers/mxc/hantro_845/hantrodec_845s.c
+++ b/drivers/mxc/hantro_845/hantrodec_845s.c
@@ -51,6 +51,21 @@
 
 #include <linux/delay.h>
 
+#include <linux/tee_drv.h>
+
+/** @brief  PTA UUID generated at https://www.gguid.com/ */
+#define PTA_HANTRO_VPU_PTA_UUID {0xf45a8128,0x23ff,0x4949,{0x98,0xa4,0x58,0xcb,0x8a,0xef,0x5a,0x75}}
+
+#define PTA_HANTRO_VPU_CMD_WRITE	0
+#define PTA_HANTRO_VPU_CMD_READ		1
+
+typedef struct {
+	uint32_t timeLow;
+	uint16_t timeMid;
+	uint16_t timeHiAndVersion;
+	uint8_t clockSeqAndNode[8];
+} RTC_UUID;
+
 //#define CONFIG_DEVICE_THERMAL_HANTRO
 #ifdef CONFIG_DEVICE_THERMAL_HANTRO
 #include <linux/device_cooling.h>
@@ -162,8 +177,11 @@ MODULE_PARM_DESC(hantro_dbg, "Debug level (0-1)");
 
 static int hantrodec_major;
 static int cores = 2;
+
 /* here's all the must remember stuff */
 typedef struct {
+	struct tee_context *ctx;
+ 	uint32_t session;
 	//char *buffer;
 	unsigned int iosize;
 	volatile u8 *hwregs;
@@ -392,6 +410,73 @@ static struct notifier_block hantro_thermal_hot_notifier = {
 };
 #endif  //CONFIG_DEVICE_THERMAL_HANTRO
 
+static void hantro_hwregs_write(hantrodec_t *dev,
+		       uint32_t offset, uint32_t value)
+{
+	if (dev->session)
+	{
+		int ret = 0;
+		struct tee_ioctl_invoke_arg inv_arg;
+		struct tee_param param[4];
+
+		memset(&inv_arg, 0, sizeof(inv_arg));
+		memset(&param, 0, sizeof(param));
+
+		/* Invoke PTA_HANTRO_VPU_CMD_WRITE function */
+		inv_arg.func = PTA_HANTRO_VPU_CMD_WRITE;
+		inv_arg.session = dev->session;
+		inv_arg.num_params = 4;
+
+		/* Fill invoke cmd params */
+		param[0].attr = TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT;
+		param[0].u.value.a = offset;
+		param[0].u.value.b = value;
+
+		ret = tee_client_invoke_func(dev->ctx, &inv_arg, param);
+		if ((ret < 0) || inv_arg.ret) {
+			pr_err("PTA_hantro_hwregs_CMD_WRITE invoke function err: 0x%08X 0x%08X\n",
+			       ret,inv_arg.ret);
+			return;
+		}
+	} else {
+		iowrite32(value, dev->hwregs + offset);
+	}
+}
+
+static uint32_t hantro_hwregs_read(hantrodec_t *dev,
+		       uint32_t offset)
+{
+	if (dev->session)
+	{
+		int ret = 0;
+		struct tee_ioctl_invoke_arg inv_arg;
+		struct tee_param param[4];
+
+		memset(&inv_arg, 0, sizeof(inv_arg));
+		memset(&param, 0, sizeof(param));
+
+		/* Invoke PTA_HANTRO_VPU_CMD_READ function */
+		inv_arg.func = PTA_HANTRO_VPU_CMD_READ;
+		inv_arg.session = dev->session;
+		inv_arg.num_params = 4;
+
+		/* Fill invoke cmd params */
+		param[0].attr = TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT;
+		param[1].attr = TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT;
+		param[0].u.value.a = offset;
+
+		ret = tee_client_invoke_func(dev->ctx, &inv_arg, param);
+		if ((ret < 0) || inv_arg.ret) {
+			pr_err("PTA_hantro_hwregs_CMD_READ invoke function err: 0x%08X 0x%08X\n",
+			       ret,inv_arg.ret);
+			return 0;
+		}
+		return param[1].u.value.a;
+	} else {
+		return ioread32(dev->hwregs + offset);
+	}
+}
+
 static void ReadCoreConfig(hantrodec_t *dev)
 {
 	int c = dev->core_id;
@@ -402,7 +487,7 @@ static void ReadCoreConfig(hantrodec_t *dev)
 	//for (c = 0; c < dev->cores; c++) {
 		/* Decoder configuration */
 		if (IS_G1(dev->hw_id)) {
-			reg = ioread32(dev->hwregs + HANTRODEC_SYNTH_CFG * 4);
+			reg = hantro_hwregs_read(dev, HANTRODEC_SYNTH_CFG * 4);
 
 			tmp = (reg >> DWL_H264_E) & 0x3U;
 			if (tmp)
@@ -434,7 +519,7 @@ static void ReadCoreConfig(hantrodec_t *dev)
 				pr_debug("hantrodec: Core[%d] has VP6\n", c);
 			dev->cfg |= tmp ? 1 << DWL_CLIENT_TYPE_VP6_DEC : 0;
 
-			reg = ioread32(dev->hwregs + HANTRODEC_SYNTH_CFG_2 * 4);
+			reg = hantro_hwregs_read(dev, HANTRODEC_SYNTH_CFG_2 * 4);
 
 			/* VP7 and WEBP is part of VP8 */
 			mask =  (1 << DWL_VP8_E) | (1 << DWL_VP7_E) | (1 << DWL_WEBP_E);
@@ -458,9 +543,9 @@ static void ReadCoreConfig(hantrodec_t *dev)
 			dev->cfg |= tmp ? 1 << DWL_CLIENT_TYPE_RV_DEC : 0;
 
 			/* Post-processor configuration */
-			//reg = ioread32(dev->hwregs + HANTROPP_SYNTH_CFG * 4);
+			//reg = hantro_hwregs_read(dev, HANTROPP_SYNTH_CFG * 4);
 		} else {
-			reg = ioread32(dev->hwregs + HANTRODEC_SYNTH_CFG_2 * 4);
+			reg = hantro_hwregs_read(dev, HANTRODEC_SYNTH_CFG_2 * 4);
 
 			tmp = (reg >> DWL_HEVC_E) & 0x3U;
 			if (tmp)
@@ -474,7 +559,7 @@ static void ReadCoreConfig(hantrodec_t *dev)
 		}
 
 		/* Post-processor configuration */
-		reg = ioread32(dev->hwregs + HANTRODECPP_SYNTH_CFG * 4);
+		reg = hantro_hwregs_read(dev, HANTRODECPP_SYNTH_CFG * 4);
 
 		tmp = (reg >> DWL_PP_E) & 0x01U;
 		if (tmp)
@@ -620,7 +705,7 @@ static void ReleaseDecoder(hantrodec_t *dev)
 	u32 status;
 	unsigned long flags;
 
-	status = ioread32(dev->hwregs + HANTRODEC_IRQ_STAT_DEC_OFF);
+	status = hantro_hwregs_read(dev, HANTRODEC_IRQ_STAT_DEC_OFF);
 
 	/* make sure HW is disabled */
 	if (status & HANTRODEC_DEC_E) {
@@ -628,7 +713,7 @@ static void ReleaseDecoder(hantrodec_t *dev)
 
 		/* abort decoder */
 		status |= HANTRODEC_DEC_ABORT | HANTRODEC_DEC_IRQ_DISABLE;
-		iowrite32(status, dev->hwregs + HANTRODEC_IRQ_STAT_DEC_OFF);
+		hantro_hwregs_write(dev,HANTRODEC_IRQ_STAT_DEC_OFF,status);
 	}
 
 	spin_lock_irqsave(&owner_lock, flags);
@@ -666,7 +751,7 @@ static void ReleasePostProcessor(hantrodec_t *dev)
 {
 	unsigned long flags;
 
-	u32 status = ioread32(dev->hwregs + HANTRO_IRQ_STAT_PP_OFF);
+	u32 status = hantro_hwregs_read(dev, HANTRO_IRQ_STAT_PP_OFF);
 
 	/* make sure HW is disabled */
 	if (status & HANTRO_PP_E) {
@@ -677,7 +762,7 @@ static void ReleasePostProcessor(hantrodec_t *dev)
 
 		/* disable postprocessor */
 		status &= (~HANTRO_PP_E);
-		iowrite32(0x10, dev->hwregs + HANTRO_IRQ_STAT_PP_OFF);
+		hantro_hwregs_write(dev,HANTRO_IRQ_STAT_PP_OFF,0x10);
 	}
 
 	spin_lock_irqsave(&owner_lock, flags);
@@ -727,6 +812,7 @@ static long ReserveDecPp(hantrodec_t *dev, struct file *filp, unsigned long form
 	return Core;
 }
 #endif
+
 static long DecFlushRegs(hantrodec_t *dev, struct core_desc *Core)
 {
 	long ret = 0, i;
@@ -752,11 +838,12 @@ static long DecFlushRegs(hantrodec_t *dev, struct core_desc *Core)
 
 		/* write dec regs but the status reg[1] to hardware */
 		/* both original and extended regs need to be written */
+
 		for (i = 2; i <= HANTRO_DEC_ORG_LAST_REG; i++)
-			iowrite32(dev->dec_regs[i], dev->hwregs + i*4);
+			hantro_hwregs_write(dev,i*4,dev->dec_regs[i]);
 #ifdef USE_64BIT_ENV
 		for (i = HANTRO_DEC_EXT_FIRST_REG; i <= HANTRO_DEC_EXT_LAST_REG; i++)
-			iowrite32(dev->dec_regs[i], dev->hwregs + i*4);
+			hantro_hwregs_write(dev,i*4,dev->dec_regs[i]);
 #endif
 	} else {
 		ret = copy_from_user(dev->dec_regs, Core->regs, HANTRO_G2_DEC_REGS*4);
@@ -767,11 +854,11 @@ static long DecFlushRegs(hantrodec_t *dev, struct core_desc *Core)
 
 		/* write all regs but the status reg[1] to hardware */
 		for (i = 2; i <= HANTRO_G2_DEC_LAST_REG; i++)
-			iowrite32(dev->dec_regs[i], dev->hwregs + i*4);
+			hantro_hwregs_write(dev,i*4,dev->dec_regs[i]);
 	}
 
 	/* write the status register, which may start the decoder */
-	iowrite32(dev->dec_regs[1], dev->hwregs + 4);
+	hantro_hwregs_write(dev,4,dev->dec_regs[1]);
 
 	PDEBUG("flushed registers on Core %d\n", dev->core_id);
 
@@ -791,10 +878,10 @@ static long DecRefreshRegs(hantrodec_t *dev, struct core_desc *Core)
 		/* read all registers from hardware */
 		/* both original and extended regs need to be read */
 		for (i = 0; i <= HANTRO_DEC_ORG_LAST_REG; i++)
-			dev->dec_regs[i] = ioread32(dev->hwregs + i*4);
+			dev->dec_regs[i] = hantro_hwregs_read(dev, + i*4);
 #ifdef USE_64BIT_ENV
 		for (i = HANTRO_DEC_EXT_FIRST_REG; i <= HANTRO_DEC_EXT_LAST_REG; i++)
-			dev->dec_regs[i] = ioread32(dev->hwregs + i*4);
+			dev->dec_regs[i] = hantro_hwregs_read(dev, i*4);
 #endif
 
 		if (dev->timeout) {
@@ -824,7 +911,7 @@ static long DecRefreshRegs(hantrodec_t *dev, struct core_desc *Core)
 
 		/* read all registers from hardware */
 		for (i = 0; i <= HANTRO_G2_DEC_LAST_REG; i++)
-			dev->dec_regs[i] = ioread32(dev->hwregs + i*4);
+			dev->dec_regs[i] = hantro_hwregs_read(dev, i*4);
 
 		if (dev->timeout) {
 			/* Enable TIMEOUT bits in Reg[1] */
@@ -909,14 +996,13 @@ static long PPFlushRegs(hantrodec_t *dev, struct core_desc *Core)
 	/* write all regs but the status reg[1] to hardware */
 	/* both original and extended regs need to be written */
 	for (i = HANTRO_PP_ORG_FIRST_REG + 1; i <= HANTRO_PP_ORG_LAST_REG; i++)
-		iowrite32(dev->dec_regs[i], dev->hwregs + i*4);
+		hantro_hwregs_write(dev,i*4,dev->dec_regs[i]);
 #ifdef USE_64BIT_ENV
 	for (i = HANTRO_PP_EXT_FIRST_REG; i <= HANTRO_PP_EXT_LAST_REG; i++)
-		iowrite32(dev->dec_regs[i], dev->hwregs + i*4);
+		hantro_hwregs_write(dev,i*4,dev->dec_regs[i]);
 #endif
 	/* write the stat reg, which may start the PP */
-	iowrite32(dev->dec_regs[HANTRO_PP_ORG_FIRST_REG],
-	dev->hwregs + HANTRO_PP_ORG_FIRST_REG * 4);
+	hantro_hwregs_write(dev,HANTRO_PP_ORG_FIRST_REG * 4,dev->dec_regs[HANTRO_PP_ORG_FIRST_REG]);
 
 	return 0;
 }
@@ -938,10 +1024,10 @@ static long PPRefreshRegs(hantrodec_t *dev, struct core_desc *Core)
 	/* read all registers from hardware */
 	/* both original and extended regs need to be read */
 	for (i = HANTRO_PP_ORG_FIRST_REG; i <= HANTRO_PP_ORG_LAST_REG; i++)
-		dev->dec_regs[i] = ioread32(dev->hwregs + i*4);
+		dev->dec_regs[i] = hantro_hwregs_read(dev, i*4);
 #ifdef USE_64BIT_ENV
 	for (i = HANTRO_PP_EXT_FIRST_REG; i <= HANTRO_PP_EXT_LAST_REG; i++)
-		dev->dec_regs[i] = ioread32(dev->hwregs + i*4);
+		dev->dec_regs[i] = hantro_hwregs_read(dev, i*4);
 #endif
 	/* put registers to user space*/
 	/* put original registers to user space*/
@@ -1286,7 +1372,7 @@ static long hantrodec_ioctl(struct file *filp, unsigned int cmd, unsigned long a
 		__get_user(id, (u32 *)arg);
 		if (id >= cores)
 			return -EFAULT;
-		id = ioread32(hantrodec_data[id].hwregs);
+		id = hantro_hwregs_read(&hantrodec_data[id],0);
 		__put_user(id, (u32 *) arg);
 		return 0;
 	}
@@ -1540,11 +1626,38 @@ static const struct file_operations hantrodec_fops = {
  *Return type     : int
  *---------------------------------------------------------------------------
  */
+static void uuid_to_octets(uint8_t d[TEE_IOCTL_UUID_LEN], const RTC_UUID *s)
+{
+	d[0] = s->timeLow >> 24;
+	d[1] = s->timeLow >> 16;
+	d[2] = s->timeLow >> 8;
+	d[3] = s->timeLow;
+	d[4] = s->timeMid >> 8;
+	d[5] = s->timeMid;
+	d[6] = s->timeHiAndVersion >> 8;
+	d[7] = s->timeHiAndVersion;
+	memcpy(d + 8, s->clockSeqAndNode, sizeof(s->clockSeqAndNode));
+}
+
+static int hantrodec_optee_match(struct tee_ioctl_version_data *ver,
+				const void *data)
+{
+	if (ver->impl_id == TEE_IMPL_ID_OPTEE)
+		return 1;
+	else
+		return 0;
+}
+
 static int hantrodec_init(struct platform_device *pdev, int id)
 {
 	int result;
 	int irq;
 	struct device *temp_class;
+	hantrodec_t *dev = &hantrodec_data[id];
+
+	const RTC_UUID pta_uuid = PTA_HANTRO_VPU_PTA_UUID;
+	struct tee_ioctl_open_session_arg sess_arg;
+	struct tee_param param[4];
 
 	//dec_irq = 0;
 	//pp_irq = 0;
@@ -1558,7 +1671,7 @@ static int hantrodec_init(struct platform_device *pdev, int id)
 	//hantrodec_data.async_queue_dec = NULL;
 	//hantrodec_data.async_queue_pp = NULL;
 
-	hantrodec_data[id].iosize = (id == 0) ? DEC_IO_SIZE_0 : DEC_IO_SIZE_1;
+	dev->iosize = (id == 0) ? DEC_IO_SIZE_0 : DEC_IO_SIZE_1;
 
 	if (!hantrodec_major) {
 		dec_irq = 0;
@@ -1588,43 +1701,64 @@ static int hantrodec_init(struct platform_device *pdev, int id)
 	if (result < 0)
 		goto err;
 
-	hantrodec_data[id].dec_owner = 0;
-	hantrodec_data[id].pp_owner = 0;
+	dev->dec_owner = 0;
+	dev->pp_owner = 0;
 
-	sema_init(&hantrodec_data[id].dec_core_sem, 1);
-	sema_init(&hantrodec_data[id].pp_core_sem, 1);
+	sema_init(&dev->dec_core_sem, 1);
+	sema_init(&dev->pp_core_sem, 1);
 
 	/* read configuration fo all cores */
-	ReadCoreConfig(&hantrodec_data[id]);
+	ReadCoreConfig(dev);
 
 	/* reset hardware */
-	ResetAsic(&hantrodec_data[id]);
+	ResetAsic(dev);
 
 	/* register irq for each core*/
 	irq = platform_get_irq_byname(pdev, "irq_hantro");
 	if (irq > 0) {
-		hantrodec_data[id].irq = irq;
+		dev->irq = irq;
 		result = request_irq(irq, hantrodec_isr, IRQF_SHARED,
-				"hantrodec", (void *) &hantrodec_data[id]);
+				"hantrodec", (void *) dev);
 
 		if (result != 0) {
 			if (result == -EINVAL)
 				pr_err("hantrodec: Bad irq number or handler\n");
 			else if (result == -EBUSY) {
 				pr_err("hantrodec: IRQ <%d> busy, change your config\n",
-				hantrodec_data[id].irq);
+				dev->irq);
 			}
 			ReleaseIO(id);
 			goto err;
 		}
-	}	else {
+	} else {
 		pr_err("hantrodec: IRQ0 not in use!\n");
 		goto err;
 	}
 
-	hantrodec_data[id].irq_rx.counter = 0;
-	hantrodec_data[id].irq_tx.counter = 0;
+	dev->irq_rx.counter = 0;
+	dev->irq_tx.counter = 0;
 	irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
+
+	memset(&sess_arg, 0, sizeof(sess_arg));
+	memset(&param, 0, sizeof(param));
+
+	/* Open session with pseudo TA */
+	uuid_to_octets(sess_arg.uuid, &pta_uuid);
+	sess_arg.clnt_login = TEE_IOCTL_LOGIN_PUBLIC;
+	sess_arg.num_params = 4;
+
+	/* Fill invoke cmd params */
+	param[0].attr = TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT;
+	param[0].u.value.a = id;
+
+	result = tee_client_open_session(dev->ctx, &sess_arg, param);
+	if ((result < 0) || sess_arg.ret) {
+		pr_err("unable to open pta session 0x%08X\n",sess_arg.ret);
+		result = -EINVAL;					// FIXME: errno
+		goto err_out_class;
+	}
+	dev->session = sess_arg.session;
+
 	pr_info("hantrodec %d : module inserted. Major = %d\n", id, hantrodec_major);
 
 	return 0;
@@ -1662,6 +1796,11 @@ static void hantrodec_cleanup(int id)
 
 	//unregister_chrdev(hantrodec_major, "hantrodec");
 
+	if (dev->session)
+	{
+		tee_client_close_session(dev->ctx, dev->session);
+	}
+
 	PDEBUG("hantrodec: module removed\n");
 
 }
@@ -1791,6 +1930,7 @@ static irqreturn_t hantrodec_isr(int irq, void *dev_id)
 		if (irq_status_dec & HANTRODEC_DEC_IRQ) {
 			/* clear dec IRQ */
 			irq_status_dec &= (~HANTRODEC_DEC_IRQ);
+			//hantro_hwregs_write(dev,HANTRODEC_IRQ_STAT_DEC_OFF,irq_status_dec);
 			iowrite32(irq_status_dec, hwregs + HANTRODEC_IRQ_STAT_DEC_OFF);
 
 			PDEBUG("decoder IRQ received! Core %d\n", dev->core_id);
@@ -1827,20 +1967,20 @@ static void ResetAsic(hantrodec_t *dev)
 	u32 status;
 
 	//for (j = 0; j < dev->cores; j++) {
-		status = ioread32(dev->hwregs + HANTRODEC_IRQ_STAT_DEC_OFF);
+		status = hantro_hwregs_read(dev,HANTRODEC_IRQ_STAT_DEC_OFF);
 
 		if (status & HANTRODEC_DEC_E) {
 			/* abort with IRQ disabled */
 			status = HANTRODEC_DEC_ABORT | HANTRODEC_DEC_IRQ_DISABLE;
-			iowrite32(status, dev->hwregs + HANTRODEC_IRQ_STAT_DEC_OFF);
+			hantro_hwregs_write(dev,HANTRODEC_IRQ_STAT_DEC_OFF,status);
 		}
 
 		if (IS_G1(dev->hw_id))
 			/* reset PP */
-			iowrite32(0, dev->hwregs + HANTRO_IRQ_STAT_PP_OFF);
+			hantro_hwregs_write(dev,HANTRO_IRQ_STAT_PP_OFF,0);
 
 		for (i = 4; i < dev->iosize; i += 4)
-			iowrite32(0, dev->hwregs + i);
+			hantro_hwregs_write(dev,i,0);
 	//}
 }
 
@@ -1860,10 +2000,10 @@ static void dump_regs(hantrodec_t *dev)
 	for (c = 0; c < dev->cores; c++) {
 		for (i = 0; i < dev->iosize[c]; i += 4*4) {
 			PDEBUG("\toffset %04X: %08X  %08X  %08X  %08X\n", i,
-			ioread32(dev->hwregs[c] + i),
-			ioread32(dev->hwregs[c] + i + 4),
-			ioread32(dev->hwregs[c] + i + 8),
-			ioread32(dev->hwregs[c] + i + 12));
+			hantro_hwregs_read(dev, i),
+			hantro_hwregs_read(dev, i + 4),
+			hantro_hwregs_read(dev, i + 8),
+			hantro_hwregs_read(dev, i + 12));
 		}
 	}
 	PDEBUG("Reg Dump End\n");
@@ -1876,6 +2016,11 @@ static int hantro_dev_probe(struct platform_device *pdev)
 	struct resource *res;
 	unsigned long reg_base;
 	int id;
+	struct tee_ioctl_version_data vers = {
+		.impl_id = TEE_OPTEE_CAP_TZ,
+		.impl_caps = TEE_IMPL_ID_OPTEE,
+		.gen_caps = TEE_GEN_CAP_VPU,
+	};
 
 	id = hantro_device_id(&pdev->dev);
 	if (id < 0)
@@ -1909,6 +2054,16 @@ static int hantro_dev_probe(struct platform_device *pdev)
 	pm_runtime_get_sync(&pdev->dev);
 	hantro_ctrlblk_reset(&hantrodec_data[id]);
 
+	hantrodec_data[id].ctx = tee_client_open_context(NULL, hantrodec_optee_match,
+					     NULL, &vers);
+	if (IS_ERR(hantrodec_data[id].ctx))
+	{
+		pr_err("unable to open tee ctx 0x%08X\n",(void*)hantrodec_data[id].ctx);
+		hantrodec_data[id].ctx = NULL;
+		err = -EINVAL;					// FIXME: errno
+		goto error;
+	}
+
 	err = hantrodec_init(pdev, id);
 	if (err != 0) {
 		pr_err("hantro: hantrodec_init failed\n");
@@ -1959,6 +2114,13 @@ static int hantro_dev_remove(struct platform_device *pdev)
 	HANTRO_UNREG_THERMAL_NOTIFIER(&hantro_thermal_hot_notifier);
 #endif
 
+	if (dev->ctx)
+	{
+		tee_client_close_context(dev->ctx);
+
+		dev->ctx = NULL;
+	}
+
 	return 0;
 }
 
@@ -2029,7 +2191,7 @@ static void __exit hantro_exit(void)
 	platform_driver_unregister(&mxchantro_driver);
 }
 
-module_init(hantro_init);
+late_initcall(hantro_init);
 module_exit(hantro_exit);
 
 /* module description */
-- 
2.17.1

