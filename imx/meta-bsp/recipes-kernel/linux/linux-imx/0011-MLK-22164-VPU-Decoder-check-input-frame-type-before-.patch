From d7f66a8689a094cf586145f8e577cf062bcdfc82 Mon Sep 17 00:00:00 2001
From: Shijie Qin <shijie.qin@nxp.com>
Date: Fri, 5 Jul 2019 14:45:47 +0800
Subject: [PATCH 11/52] MLK-22164 VPU Decoder: check input frame type before
 update to ring buffer

On Andorid, will re-transfer codec info after seek, hence need to
check it and insert sequence header for some format which inserted
header by driver, especailly for RV format.

Signed-off-by: Shijie Qin <shijie.qin@nxp.com>
Reviewed-by: ming_qian <ming.qian@nxp.com>
---
 drivers/mxc/vpu_malone/insert_startcode.c |  4 +--
 drivers/mxc/vpu_malone/insert_startcode.h |  2 ++
 drivers/mxc/vpu_malone/vpu_b0.c           | 44 ++++++++++++++++++++---
 3 files changed, 44 insertions(+), 6 deletions(-)

diff --git a/drivers/mxc/vpu_malone/insert_startcode.c b/drivers/mxc/vpu_malone/insert_startcode.c
index 81115b4dca89..082a77a11366 100644
--- a/drivers/mxc/vpu_malone/insert_startcode.c
+++ b/drivers/mxc/vpu_malone/insert_startcode.c
@@ -404,8 +404,8 @@ static void insert_frame_header_spk(u_int8 *dst, u_int32 uPayloadSize, u_int32 u
 	dst[15] = 0x50;
 }
 
-static void insert_payload_header_arv(u_int8 *dst, u_int32 uScodeType,
-		enum ARV_FRAME_TYPE type, u_int32 uPayloadSize, u_int32 uWidth, u_int32 uHeight)
+void insert_payload_header_arv(u_int8 *dst, u_int32 uScodeType,
+	enum ARV_FRAME_TYPE type, u_int32 uPayloadSize, u_int32 uWidth, u_int32 uHeight)
 {
 	// Startcode
 	dst[0] = 0x00;
diff --git a/drivers/mxc/vpu_malone/insert_startcode.h b/drivers/mxc/vpu_malone/insert_startcode.h
index ca9d4e0c1917..4c073905f41f 100644
--- a/drivers/mxc/vpu_malone/insert_startcode.h
+++ b/drivers/mxc/vpu_malone/insert_startcode.h
@@ -37,5 +37,7 @@ u_int32 insert_scode_4_seq(struct vpu_ctx *ctx, u_int8 *src, u_int8 *dst, u_int3
 u_int32 insert_scode_4_arv_slice(struct vpu_ctx *ctx, u_int8 *dst, struct VPU_FMT_INFO_ARV *arv_frame, u_int32 uPayloadSize);
 struct VPU_FMT_INFO_ARV *get_arv_info(struct vpu_ctx *ctx, u_int8 *src, u_int32 size);
 void put_arv_info(struct VPU_FMT_INFO_ARV *arv_frame);
+void insert_payload_header_arv(u_int8 *dst, u_int32 uScodeType,
+	enum ARV_FRAME_TYPE type, u_int32 uPayloadSize, u_int32 uWidth, u_int32 uHeight);
 
 #endif
diff --git a/drivers/mxc/vpu_malone/vpu_b0.c b/drivers/mxc/vpu_malone/vpu_b0.c
index 2e6b1437fdb6..b4000862e58f 100644
--- a/drivers/mxc/vpu_malone/vpu_b0.c
+++ b/drivers/mxc/vpu_malone/vpu_b0.c
@@ -3252,6 +3252,37 @@ static bool vpu_dec_stream_is_ready(struct vpu_ctx *ctx)
 	return true;
 }
 
+static uint32_t insert_scode_4_seq_4_arv(struct vpu_ctx *ctx, u_int8 *input_buffer,
+	u_int32 buffer_size, uint32_t uStrBufIdx)
+{
+	struct vpu_dev *dev = ctx->dev;
+	uint32_t index = ctx->str_index;
+	pSTREAM_BUFFER_DESCRIPTOR_TYPE pStrBufDesc;
+	uint32_t nfreespace = 0;
+	u_int8 seq_header[256] = {0};
+	uint32_t length = 0;
+	struct queue_data *This = &ctx->q_data[V4L2_SRC];
+
+	pStrBufDesc = get_str_buffer_desc(ctx);
+	nfreespace = got_free_space(pStrBufDesc->wptr, pStrBufDesc->rptr,
+		pStrBufDesc->start, pStrBufDesc->end);
+
+	if (nfreespace < (buffer_size + 16 + MIN_SPACE)) {
+		vpu_dbg(LVL_INFO, "buffer_full: the circular buffer freespace < buffer_size\n");
+		return 0;
+	}
+
+	insert_payload_header_arv(seq_header, SCODE_NEW_SEQUENCE, ctx->arv_type,
+		buffer_size + 12, This->width, This->height);
+	length = copy_buffer_to_stream(ctx, seq_header, 16);
+	length += copy_buffer_to_stream(ctx, input_buffer, buffer_size);
+
+	dev->shared_mem.pSharedInterface->pStreamBuffDesc[index][uStrBufIdx] =
+		(VPU_REG_BASE + get_str_buffer_desc_offset(ctx));
+
+	return length;
+}
+
 static void enqueue_stream_data(struct vpu_ctx *ctx, uint32_t uStrBufIdx)
 {
 	struct vb2_data_req *p_data_req;
@@ -3259,6 +3290,7 @@ static void enqueue_stream_data(struct vpu_ctx *ctx, uint32_t uStrBufIdx)
 	void *input_buffer;
 	uint32_t buffer_size;
 	u32 frame_bytes;
+	struct vb2_v4l2_buffer *vbuf;
 
 	while (!list_empty(&This->drv_q)) {
 		if (!vpu_dec_stream_is_ready(ctx)) {
@@ -3274,10 +3306,14 @@ static void enqueue_stream_data(struct vpu_ctx *ctx, uint32_t uStrBufIdx)
 
 		buffer_size = p_data_req->vb2_buf->planes[0].bytesused;
 		input_buffer = (void *)vb2_plane_vaddr(p_data_req->vb2_buf, 0);
-		frame_bytes = update_stream_addr_vpu(ctx,
-						     input_buffer,
-						     buffer_size,
-						     uStrBufIdx);
+
+		vbuf = to_vb2_v4l2_buffer(p_data_req->vb2_buf);
+		if (vbuf->flags & V4L2_NXP_BUF_FLAG_CODECCONFIG
+			&& This->vdec_std == VPU_VIDEO_RV)
+			frame_bytes = insert_scode_4_seq_4_arv(ctx, input_buffer, buffer_size, uStrBufIdx);
+		else
+			frame_bytes = update_stream_addr_vpu(ctx, input_buffer, buffer_size, uStrBufIdx);
+
 		if (frame_bytes == 0) {
 			vpu_dbg(LVL_INFO, " %s no space to write\n", __func__);
 			return;
-- 
2.17.1

