From 49b3f114b69a80c2180637232537f2a730c87227 Mon Sep 17 00:00:00 2001
From: Cedric Neveux <cedric.neveux@nxp.com>
Date: Tue, 31 Mar 2020 10:09:29 +0200
Subject: [PATCH 68/87] TEE-527 drivers: caam: use CAAM DMA object in Cipher

Update Cipher driver to use the CAAM DMA object
 - Cipher AES/DES/DES3 all modes
 - Cipher MAC

Signed-off-by: Cedric Neveux <cedric.neveux@nxp.com>
---
 core/drivers/crypto/caam/cipher/caam_cipher.c | 389 ++++++------------
 .../crypto/caam/cipher/caam_cipher_mac.c      | 277 ++++---------
 .../crypto/caam/cipher/caam_cipher_xts.c      |  67 +--
 core/drivers/crypto/caam/cipher/local.h       |  10 +-
 4 files changed, 246 insertions(+), 497 deletions(-)

diff --git a/core/drivers/crypto/caam/cipher/caam_cipher.c b/core/drivers/crypto/caam/cipher/caam_cipher.c
index 3e032ef8..a034101a 100644
--- a/core/drivers/crypto/caam/cipher/caam_cipher.c
+++ b/core/drivers/crypto/caam/cipher/caam_cipher.c
@@ -9,7 +9,6 @@
 #include <caam_io.h>
 #include <caam_jr.h>
 #include <caam_utils_mem.h>
-#include <caam_utils_sgt.h>
 #include <mm/core_memprot.h>
 #include <string.h>
 #include <tee/cache.h>
@@ -182,14 +181,12 @@ static enum caam_status do_check_keysize(const struct caamdefkey *def,
 
 enum caam_status caam_cipher_block(struct cipherdata *ctx, bool savectx,
 				   uint8_t keyid, bool encrypt,
-				   struct caambuf *indata,
-				   struct caambuf *outdata, unsigned int blocks)
+				   struct caamdmaobj *src,
+				   struct caamdmaobj *dst)
 {
 	enum caam_status retstatus = CAAM_FAILURE;
 	struct caam_jobctx jobctx = {};
 	uint32_t *desc = ctx->descriptor;
-	struct caamsgtbuf src_sgt = { .sgt_type = false };
-	struct caamsgtbuf dst_sgt = { .sgt_type = false };
 
 	caam_desc_init(desc);
 	caam_desc_add_word(desc, DESC_HEADER(0));
@@ -220,100 +217,18 @@ enum caam_status caam_cipher_block(struct cipherdata *ctx, bool savectx,
 				   CIPHER_INITFINAL(ctx->alg->type, encrypt));
 	}
 
-	/*
-	 * Load the source data.
-	 * If there is a block of data saved during the previous streaming
-	 * updates add it first.
-	 * If Source data is a User Data buffer mapped on multiple pages
-	 * create a Scatter/Gather table.
-	 */
-	if (blocks & CIPHER_BLOCK_IN)
-		retstatus = caam_sgt_build_block_data(&src_sgt, &ctx->blockbuf,
-						      indata);
-	else
-		retstatus = caam_sgt_build_block_data(&src_sgt, NULL, indata);
-
-	if (retstatus != CAAM_NO_ERROR)
-		goto exit_cipher_block;
-
-	if (src_sgt.sgt_type) {
-		if (src_sgt.length > FIFO_LOAD_MAX) {
-			caam_desc_add_word(desc, FIFO_LD_SGT_EXT(CLASS_1, MSG,
-								 LAST_C1));
-			caam_desc_add_ptr(desc, virt_to_phys(src_sgt.sgt));
-			caam_desc_add_word(desc, src_sgt.length);
-		} else {
-			caam_desc_add_word(desc,
-					   FIFO_LD_SGT(CLASS_1, MSG, LAST_C1,
-						       src_sgt.length));
-			caam_desc_add_ptr(desc, virt_to_phys(src_sgt.sgt));
-		}
-		caam_sgt_cache_op(TEE_CACHECLEAN, &src_sgt);
-	} else {
-		if (src_sgt.length > FIFO_LOAD_MAX) {
-			caam_desc_add_word(desc,
-					   FIFO_LD_EXT(CLASS_1, MSG, LAST_C1));
-			caam_desc_add_ptr(desc, src_sgt.buf->paddr);
-			caam_desc_add_word(desc, src_sgt.length);
-		} else {
-			caam_desc_add_word(desc, FIFO_LD(CLASS_1, MSG, LAST_C1,
-							 src_sgt.length));
-			caam_desc_add_ptr(desc, src_sgt.buf->paddr);
-		}
-
-		if (!src_sgt.buf->nocache)
-			cache_operation(TEE_CACHECLEAN, src_sgt.buf->data,
-					src_sgt.length);
+	/* Load the source data if any */
+	if (src) {
+		caam_desc_fifo_load(desc, src, CLASS_1, MSG, LAST_C1);
+		caam_dmaobj_cache_push(src);
 	}
 
-	/* No output data to do - just create/update operation context */
-	if (!outdata)
-		goto desc_no_outdata;
-
-	/*
-	 * Output data storage.
-	 * In case of streaming, part of the output data is stored in the
-	 * backup block for the next operation.
-	 * If Output data is a User Data buffer mapped on multiple pages
-	 * create a Scatter/Gather table.
-	 */
-	if (blocks & CIPHER_BLOCK_OUT)
-		retstatus = caam_sgt_build_block_data(&dst_sgt, &ctx->blockbuf,
-						      outdata);
-	else
-		retstatus = caam_sgt_build_block_data(&dst_sgt, NULL, outdata);
-
-	if (retstatus != CAAM_NO_ERROR)
-		goto exit_cipher_block;
-
-	if (dst_sgt.sgt_type) {
-		if (dst_sgt.length > FIFO_LOAD_MAX) {
-			caam_desc_add_word(desc, FIFO_ST_SGT_EXT(MSG_DATA));
-			caam_desc_add_ptr(desc, virt_to_phys(dst_sgt.sgt));
-			caam_desc_add_word(desc, dst_sgt.length);
-		} else {
-			caam_desc_add_word(desc, FIFO_ST_SGT(MSG_DATA,
-							     dst_sgt.length));
-			caam_desc_add_ptr(desc, virt_to_phys(dst_sgt.sgt));
-		}
-		caam_sgt_cache_op(TEE_CACHEFLUSH, &dst_sgt);
-	} else {
-		if (dst_sgt.length > FIFO_LOAD_MAX) {
-			caam_desc_add_word(desc, FIFO_ST_EXT(MSG_DATA));
-			caam_desc_add_ptr(desc, dst_sgt.buf->paddr);
-			caam_desc_add_word(desc, dst_sgt.length);
-		} else {
-			caam_desc_add_word(desc,
-					   FIFO_ST(MSG_DATA, dst_sgt.length));
-			caam_desc_add_ptr(desc, dst_sgt.buf->paddr);
-		}
-
-		if (!dst_sgt.buf->nocache)
-			cache_operation(TEE_CACHEFLUSH, dst_sgt.buf->data,
-					dst_sgt.length);
+	/* Store the output data if any */
+	if (dst) {
+		caam_desc_fifo_store(desc, dst, MSG_DATA);
+		caam_dmaobj_cache_push(dst);
 	}
 
-desc_no_outdata:
 	if (ctx->ctx.length && ctx->alg->size_ctx) {
 		if (savectx) {
 			/* Store the context */
@@ -340,13 +255,6 @@ desc_no_outdata:
 		retstatus = CAAM_FAILURE;
 	}
 
-exit_cipher_block:
-	if (src_sgt.sgt_type)
-		caam_sgtbuf_free(&src_sgt);
-
-	if (dst_sgt.sgt_type)
-		caam_sgtbuf_free(&dst_sgt);
-
 	return retstatus;
 }
 
@@ -676,36 +584,20 @@ static TEE_Result do_update_streaming(struct drvcrypt_cipher_update *dupdate)
 	TEE_Result ret = TEE_ERROR_GENERIC;
 	enum caam_status retstatus = CAAM_FAILURE;
 	struct cipherdata *ctx = dupdate->ctx;
-	struct caambuf srcbuf = {};
-	struct caambuf dstbuf = {};
-	paddr_t psrc = 0;
+	struct caamdmaobj *src = NULL;
+	struct caamdmaobj *dst = NULL;
+	struct caamdmaobj insrc = {};
+	struct caamdmaobj indst = {};
+	struct caamdmaobj srcblock = {};
+	struct caamdmaobj dstblock = {};
 	size_t fullSize = 0;
 	size_t size_topost = 0;
 	size_t size_todo = 0;
 	size_t size_indone = 0;
-	int realloc = 0;
-	struct caambuf dst_align = {};
 
 	CIPHER_TRACE("Length=%zu - %s", dupdate->src.length,
 		     ctx->encrypt ? "Encrypt" : "Decrypt");
 
-	realloc = caam_set_or_alloc_align_buf(dupdate->dst.data, &dst_align,
-					      dupdate->dst.length);
-	if (realloc == -1) {
-		CIPHER_TRACE("Destination buffer reallocation error");
-		ret = TEE_ERROR_OUT_OF_MEMORY;
-		goto end_streaming;
-	}
-
-	psrc = virt_to_phys(dupdate->src.data);
-
-	/* Check the payload/cipher physical addresses */
-	if (!psrc) {
-		CIPHER_TRACE("Bad Addr (src 0x%" PRIxPA ")", psrc);
-		ret = TEE_ERROR_GENERIC;
-		goto end_streaming;
-	}
-
 	/* Calculate the total data to be handled */
 	fullSize = ctx->blockbuf.filled + dupdate->src.length;
 	if (fullSize < ctx->alg->size_block) {
@@ -722,65 +614,71 @@ static TEE_Result do_update_streaming(struct drvcrypt_cipher_update *dupdate)
 	/* If there is full block to do, do them first */
 	if (size_todo) {
 		size_indone = size_todo - ctx->blockbuf.filled;
+		ret = caam_dmaobj_init_input(&insrc, dupdate->src.data,
+					     size_indone);
+		if (ret)
+			goto end_streaming;
 
-		if (!caam_mem_is_cached_buf(dupdate->src.data,
-					    dupdate->src.length))
-			srcbuf.nocache = 1;
+		ret = caam_dmaobj_init_output(&indst, dupdate->dst.data,
+					      size_indone, size_indone);
+		if (ret)
+			goto end_streaming;
 
 		/*
 		 * If there are data saved in the temporary buffer,
 		 * redo it to generate and increment cipher context.
 		 */
 		if (ctx->blockbuf.filled) {
-			srcbuf.data = dupdate->src.data;
-			srcbuf.length = dupdate->src.length - size_topost;
-			srcbuf.paddr = psrc;
-
-			dstbuf.data = dst_align.data;
-			dstbuf.length = dupdate->dst.length - size_topost;
-			dstbuf.paddr = dst_align.paddr;
-			dstbuf.nocache = dst_align.nocache;
-
-			retstatus =
-				caam_cipher_block(ctx, true, NEED_KEY1,
-						  ctx->encrypt, &srcbuf,
-						  &dstbuf, CIPHER_BLOCK_BOTH);
+			ret = caam_dmaobj_add_first_block(&srcblock,
+							  &ctx->blockbuf,
+							  &insrc);
+			if (ret)
+				goto end_streaming;
+
+			ret = caam_dmaobj_add_first_block(&dstblock,
+							  &ctx->blockbuf,
+							  &indst);
+			if (ret)
+				goto end_streaming;
 
 			ctx->blockbuf.filled = 0;
+
+			src = &srcblock;
+			dst = &dstblock;
 		} else {
-			/* Do all complete blocks of input source */
-			srcbuf.data = dupdate->src.data;
-			srcbuf.length = size_todo;
-			srcbuf.paddr = psrc;
-
-			dstbuf.data = dst_align.data;
-			dstbuf.length = size_todo;
-			dstbuf.paddr = dst_align.paddr;
-			dstbuf.nocache = dst_align.nocache;
-
-			retstatus =
-				caam_cipher_block(ctx, true, NEED_KEY1,
-						  ctx->encrypt, &srcbuf,
-						  &dstbuf, CIPHER_BLOCK_NONE);
+			src = &insrc;
+			dst = &indst;
 		}
 
+		retstatus = caam_cipher_block(ctx, true, NEED_KEY1,
+					      ctx->encrypt, src, dst);
+
 		if (retstatus != CAAM_NO_ERROR) {
 			ret = TEE_ERROR_GENERIC;
 			goto end_streaming;
 		}
 
+		/*
+		 * Copy only the output corresponding to the
+		 * encryption/decryption of the input data.
+		 * Additional block is used to ensure that a complete
+		 * cipher block is done.
+		 */
+		caam_dmaobj_copy_to_orig(&indst);
+		caam_dmaobj_free(&insrc);
+		caam_dmaobj_free(&indst);
+
 		CIPHER_DUMPBUF("Source", dupdate->src.data,
 			       dupdate->src.length - size_topost);
-		CIPHER_DUMPBUF("Result", dst_align.data,
+		CIPHER_DUMPBUF("Result", dupdate->dst.data,
 			       dupdate->dst.length - size_topost);
 	}
 
 	if (size_topost) {
 		CIPHER_TRACE("Save input data %zu bytes (done %zu)",
 			     size_topost, size_indone);
-		struct caambuf cpysrc = {
-			.data = dupdate->src.data,
-			.length = dupdate->src.length };
+		struct caambuf cpysrc = { .data = dupdate->src.data,
+					  .length = dupdate->src.length };
 
 		retstatus = caam_cpy_block_src(&ctx->blockbuf, &cpysrc,
 					       size_indone);
@@ -789,42 +687,42 @@ static TEE_Result do_update_streaming(struct drvcrypt_cipher_update *dupdate)
 			goto end_streaming;
 		}
 
-		/* Do partial blocks of input source */
-		srcbuf.data = ctx->blockbuf.buf.data;
-		srcbuf.length = ctx->blockbuf.filled;
-		srcbuf.paddr = ctx->blockbuf.buf.paddr;
-		srcbuf.nocache = ctx->blockbuf.buf.nocache;
+		ret = caam_dmaobj_init_input(&insrc,
+					     dupdate->src.data + size_indone,
+					     dupdate->src.length - size_indone);
+		if (ret)
+			goto end_streaming;
 
-		dstbuf.data = dst_align.data + size_indone;
-		dstbuf.length = ctx->blockbuf.filled;
-		dstbuf.paddr = dst_align.paddr + size_indone;
-		dstbuf.nocache = dst_align.nocache;
+		ret = caam_dmaobj_init_output(&indst,
+					      dupdate->dst.data + size_indone,
+					      ctx->blockbuf.filled,
+					      ctx->blockbuf.filled);
+		if (ret)
+			goto end_streaming;
 
-		retstatus =
-			caam_cipher_block(ctx, false, NEED_KEY1, ctx->encrypt,
-					  &srcbuf, &dstbuf, CIPHER_BLOCK_NONE);
+		retstatus = caam_cipher_block(ctx, false, NEED_KEY1,
+					      ctx->encrypt, &insrc, &indst);
 
 		if (retstatus != CAAM_NO_ERROR) {
 			ret = TEE_ERROR_GENERIC;
 			goto end_streaming;
 		}
 
-		CIPHER_DUMPBUF("Source", srcbuf.data, srcbuf.length);
-		CIPHER_DUMPBUF("Result", dstbuf.data, dstbuf.length);
-	}
-
-	if (!dst_align.nocache)
-		cache_operation(TEE_CACHEINVALIDATE, dst_align.data,
-				dupdate->dst.length);
+		caam_dmaobj_copy_to_orig(&indst);
 
-	if (realloc)
-		memcpy(dupdate->dst.data, dst_align.data, dupdate->dst.length);
+		CIPHER_DUMPBUF("Source", ctx->blockbuf.buf.data,
+			       ctx->blockbuf.filled);
+		CIPHER_DUMPBUF("Result", dupdate->dst.data + size_indone,
+			       ctx->blockbuf.filled);
+	}
 
 	ret = TEE_SUCCESS;
 
 end_streaming:
-	if (realloc == 1)
-		caam_free_buf(&dst_align);
+	caam_dmaobj_free(&insrc);
+	caam_dmaobj_free(&indst);
+	caam_dmaobj_free(&srcblock);
+	caam_dmaobj_free(&dstblock);
 
 	return ret;
 }
@@ -840,10 +738,8 @@ static TEE_Result do_update_cipher(struct drvcrypt_cipher_update *dupdate)
 	TEE_Result ret = TEE_ERROR_GENERIC;
 	enum caam_status retstatus = CAAM_FAILURE;
 	struct cipherdata *ctx = dupdate->ctx;
-	struct caambuf srcbuf = {};
-	struct caambuf dstbuf = {};
-	int realloc = 0;
-	struct caambuf dst_align = {};
+	struct caamdmaobj src = {};
+	struct caamdmaobj dst = {};
 	unsigned int nb_buf = 0;
 	size_t offset = 0;
 
@@ -861,81 +757,35 @@ static TEE_Result do_update_cipher(struct drvcrypt_cipher_update *dupdate)
 		return TEE_ERROR_BAD_PARAMETERS;
 	}
 
-	/*
-	 * If the output memory area is cacheable and the size of
-	 * buffer is bigger than MAX_CIPHER_BUFFER, calculate
-	 * the number of buffer to do (prevent output reallocation
-	 * of a big buffer)
-	 */
-	if (dupdate->dst.length > MAX_CIPHER_BUFFER &&
-	    caam_mem_is_cached_buf(dupdate->dst.data, dupdate->dst.length)) {
-		nb_buf = dupdate->dst.length / MAX_CIPHER_BUFFER;
-
-		retstatus = caam_alloc_align_buf(&dst_align, MAX_CIPHER_BUFFER);
-		if (retstatus != CAAM_NO_ERROR) {
-			CIPHER_TRACE("Destination buffer allocation error");
-			ret = TEE_ERROR_OUT_OF_MEMORY;
-			goto end_cipher;
-		}
-		realloc = 1;
-	} else {
-		realloc = caam_set_or_alloc_align_buf(dupdate->dst.data,
-						      &dst_align,
-						      dupdate->dst.length);
-		if (realloc == -1) {
-			CIPHER_TRACE("Destination buffer reallocation error");
-			ret = TEE_ERROR_OUT_OF_MEMORY;
+	nb_buf = dupdate->dst.length / MAX_CIPHER_BUFFER;
+	for (; nb_buf; nb_buf--) {
+		ret = caam_dmaobj_init_input(&src, dupdate->src.data + offset,
+					     MAX_CIPHER_BUFFER);
+		if (ret)
 			goto end_cipher;
-		}
-	}
 
-	srcbuf.data = dupdate->src.data;
-	srcbuf.length = dupdate->src.length;
-	srcbuf.paddr = virt_to_phys(dupdate->src.data);
-	if (!caam_mem_is_cached_buf(dupdate->src.data, dupdate->src.length))
-		srcbuf.nocache = 1;
-
-	/* Check the payload/cipher physical addresses */
-	if (!srcbuf.paddr) {
-		CIPHER_TRACE("Physical Address error");
-		ret = TEE_ERROR_GENERIC;
-		goto end_cipher;
-	}
-
-	dstbuf.data = dst_align.data;
-	dstbuf.paddr = dst_align.paddr;
-	dstbuf.nocache = dst_align.nocache;
-
-	/*
-	 * Prepare to do Maximum Cipher Buffer size in case
-	 * there input data is more than the supported maximum
-	 * cipher size
-	 */
-	srcbuf.length = MAX_CIPHER_BUFFER;
-	dstbuf.length = MAX_CIPHER_BUFFER;
-
-	for (; nb_buf; nb_buf--) {
-		srcbuf.data += offset;
-		srcbuf.paddr += offset;
+		ret = caam_dmaobj_init_output(&dst, dupdate->dst.data + offset,
+					      dupdate->dst.length - offset,
+					      MAX_CIPHER_BUFFER);
+		if (ret)
+			goto end_cipher;
 
 		CIPHER_TRACE("Do nb_buf=%" PRId32 ", offset %zu", nb_buf,
 			     offset);
-		retstatus =
-			caam_cipher_block(ctx, true, NEED_KEY1, ctx->encrypt,
-					  &srcbuf, &dstbuf, CIPHER_BLOCK_NONE);
+		retstatus = caam_cipher_block(ctx, true, NEED_KEY1,
+					      ctx->encrypt, &src, &dst);
 
-		if (retstatus == CAAM_NO_ERROR) {
-			cache_operation(TEE_CACHEINVALIDATE, dstbuf.data,
-					dstbuf.length);
-
-			memcpy(dupdate->dst.data + offset, dstbuf.data,
-			       dstbuf.length);
-		} else {
+		if (retstatus != CAAM_NO_ERROR) {
 			ret = TEE_ERROR_GENERIC;
 			goto end_cipher;
 		}
 
+		caam_dmaobj_copy_to_orig(&dst);
+
 		offset += MAX_CIPHER_BUFFER;
+
+		caam_dmaobj_free(&src);
+		caam_dmaobj_free(&dst);
 	}
 
 	/*
@@ -945,36 +795,33 @@ static TEE_Result do_update_cipher(struct drvcrypt_cipher_update *dupdate)
 	if (dupdate->src.length - offset > 0) {
 		CIPHER_TRACE("Do Last %zu offset %zu",
 			     dupdate->src.length - offset, offset);
-		srcbuf.data += offset;
-		srcbuf.length = dupdate->src.length - offset;
-		srcbuf.paddr += offset;
-
-		dstbuf.length = dupdate->dst.length - offset;
-
-		retstatus =
-			caam_cipher_block(ctx, true, NEED_KEY1, ctx->encrypt,
-					  &srcbuf, &dstbuf, CIPHER_BLOCK_NONE);
+		ret = caam_dmaobj_init_input(&src, dupdate->src.data + offset,
+					     dupdate->src.length - offset);
+		if (ret)
+			goto end_cipher;
 
-		if (retstatus == CAAM_NO_ERROR) {
-			if (!dstbuf.nocache)
-				cache_operation(TEE_CACHEINVALIDATE,
-						dstbuf.data, dstbuf.length);
+		ret = caam_dmaobj_init_output(&dst, dupdate->dst.data + offset,
+					      dupdate->dst.length - offset,
+					      dupdate->dst.length - offset);
+		if (ret)
+			goto end_cipher;
 
-			if (realloc)
-				memcpy(dupdate->dst.data + offset, dstbuf.data,
-				       dstbuf.length);
+		retstatus = caam_cipher_block(ctx, true, NEED_KEY1,
+					      ctx->encrypt, &src, &dst);
 
-			ret = TEE_SUCCESS;
-		} else {
+		if (retstatus != CAAM_NO_ERROR) {
 			ret = TEE_ERROR_GENERIC;
+			goto end_cipher;
 		}
-	} else {
-		ret = TEE_SUCCESS;
+
+		caam_dmaobj_copy_to_orig(&dst);
 	}
 
+	ret = TEE_SUCCESS;
+
 end_cipher:
-	if (realloc == 1)
-		caam_free_buf(&dst_align);
+	caam_dmaobj_free(&src);
+	caam_dmaobj_free(&dst);
 
 	return ret;
 }
diff --git a/core/drivers/crypto/caam/cipher/caam_cipher_mac.c b/core/drivers/crypto/caam/cipher/caam_cipher_mac.c
index 96b15145..e60e74c7 100644
--- a/core/drivers/crypto/caam/cipher/caam_cipher_mac.c
+++ b/core/drivers/crypto/caam/cipher/caam_cipher_mac.c
@@ -9,7 +9,6 @@
 #include <caam_common.h>
 #include <caam_jr.h>
 #include <caam_utils_mem.h>
-#include <caam_utils_sgt.h>
 #include <caam_utils_status.h>
 #include <drvcrypt_mac.h>
 #include <mm/core_memprot.h>
@@ -143,28 +142,6 @@ static const struct cipheralg *get_macalgo(uint32_t algo)
 	return alg;
 }
 
-/*
- * Increment the buffer of @inc value.
- * Check if the next data is crossing a small page to get the
- * physical address of the next data with the virt_to_phys function.
- * Otherwise increment the buffer's physical address of @inc value.
- *
- * @buf   Buffer to increment
- * @inc   Increment
- */
-static inline void inc_mac_buffer(struct caambuf *buf, size_t inc)
-{
-	vaddr_t prev = (vaddr_t)buf->data;
-	vaddr_t next = prev + inc;
-
-	buf->data += inc;
-
-	if ((prev & SMALL_PAGE_MASK) > (next & SMALL_PAGE_MASK))
-		buf->paddr = virt_to_phys(buf->data);
-	else
-		buf->paddr += inc;
-}
-
 /*
  * MAC update of the cipher operation of complete block except
  * if last block. Last block can be partial block.
@@ -176,12 +153,13 @@ static TEE_Result do_update_mac(struct drvcrypt_cipher_update *dupdate)
 	TEE_Result ret = TEE_ERROR_BAD_PARAMETERS;
 	enum caam_status retstatus = CAAM_FAILURE;
 	struct cipherdata *ctx = dupdate->ctx;
-	struct caambuf srcbuf = {};
-	struct caambuf dst_align = {};
+	struct caamdmaobj src = {};
+	struct caamdmaobj srcblock = {};
+	struct caamdmaobj dst = {};
 	size_t fullSize = 0;
 	size_t size_topost = 0;
 	size_t size_todo = 0;
-	int realloc = 0;
+	uint8_t *srcdata = NULL;
 
 	CIPHER_TRACE("Length=%zu - %s", dupdate->src.length,
 		     ctx->encrypt ? "Encrypt" : " Decrypt");
@@ -199,19 +177,8 @@ static TEE_Result do_update_mac(struct drvcrypt_cipher_update *dupdate)
 	CIPHER_TRACE("FullSize %zu - posted %zu - todo %zu", fullSize,
 		     size_topost, size_todo);
 
-	if (dupdate->src.length) {
-		srcbuf.data = dupdate->src.data;
-		srcbuf.paddr = virt_to_phys(dupdate->src.data);
-
-		if (!srcbuf.paddr) {
-			CIPHER_TRACE("Bad src address");
-			return TEE_ERROR_GENERIC;
-		}
-
-		if (!caam_mem_is_cached_buf(dupdate->src.data,
-					    dupdate->src.length))
-			srcbuf.nocache = 1;
-	}
+	if (dupdate->src.length)
+		srcdata = dupdate->src.data;
 
 	if (!size_todo) {
 		/*
@@ -227,14 +194,11 @@ static TEE_Result do_update_mac(struct drvcrypt_cipher_update *dupdate)
 	}
 
 	if (dupdate->last) {
-		realloc = caam_set_or_alloc_align_buf(dupdate->dst.data,
-						      &dst_align,
-						      ctx->alg->size_ctx);
-		if (realloc == -1) {
-			CIPHER_TRACE("Dest buffer reallocation error");
-			ret = TEE_ERROR_OUT_OF_MEMORY;
+		ret = caam_dmaobj_init_output(&dst, dupdate->dst.data,
+					      dupdate->dst.length,
+					      ctx->alg->size_ctx);
+		if (ret)
 			goto end_mac;
-		}
 	}
 
 	/*
@@ -242,59 +206,63 @@ static TEE_Result do_update_mac(struct drvcrypt_cipher_update *dupdate)
 	 * buffer.
 	 */
 	if (ctx->blockbuf.filled) {
-		srcbuf.length = ctx->alg->size_block - ctx->blockbuf.filled;
+		ret = caam_dmaobj_init_input(&src, srcdata,
+					     ctx->alg->size_block -
+						     ctx->blockbuf.filled);
+		if (ret)
+			goto end_mac;
 
-		if (dupdate->last)
+		ret = caam_dmaobj_add_first_block(&srcblock, &ctx->blockbuf,
+						  &src);
+		if (ret)
+			goto end_mac;
+
+		srcdata += ctx->alg->size_block - ctx->blockbuf.filled;
+		ctx->blockbuf.filled = 0;
+		size_todo -= ctx->alg->size_block;
+
+		if (dupdate->last && !size_todo) {
 			retstatus = caam_cipher_block(ctx, true, NEED_KEY1,
-						      true, &srcbuf, &dst_align,
-						      CIPHER_BLOCK_IN);
-		else
+						      true, &srcblock, &dst);
+			caam_dmaobj_copy_to_orig(&dst);
+			goto final_mac_update;
+		} else {
 			retstatus = caam_cipher_block(ctx, true, NEED_KEY1,
-						      true, &srcbuf, NULL,
-						      CIPHER_BLOCK_IN);
+						      true, &srcblock, NULL);
+		}
 
-		ctx->blockbuf.filled = 0;
 		if (retstatus != CAAM_NO_ERROR) {
 			ret = TEE_ERROR_GENERIC;
 			goto end_mac;
 		}
 
-		size_todo -= ctx->alg->size_block;
-
-		if (size_todo || size_topost)
-			inc_mac_buffer(&srcbuf, srcbuf.length);
+		caam_dmaobj_free(&src);
 	}
 
-	srcbuf.length = ctx->alg->size_block;
-
 	while (size_todo) {
-		if (dupdate->last)
+		ret = caam_dmaobj_init_input(&src, srcdata,
+					     ctx->alg->size_block);
+		if (ret)
+			goto end_mac;
+
+		if (dupdate->last) {
 			retstatus = caam_cipher_block(ctx, true, NEED_KEY1,
-						      true, &srcbuf, &dst_align,
-						      CIPHER_BLOCK_NONE);
-		else
+						      true, &src, &dst);
+			caam_dmaobj_copy_to_orig(&dst);
+		} else {
 			retstatus = caam_cipher_block(ctx, true, NEED_KEY1,
-						      true, &srcbuf, NULL,
-						      CIPHER_BLOCK_NONE);
+						      true, &src, NULL);
+		}
+
 		if (retstatus != CAAM_NO_ERROR)
 			return TEE_ERROR_GENERIC;
 
 		size_todo -= ctx->alg->size_block;
+		srcdata += ctx->alg->size_block;
 
-		if (size_todo || size_topost)
-			inc_mac_buffer(&srcbuf, srcbuf.length);
+		caam_dmaobj_free(&src);
 	};
 
-	if (dst_align.data) {
-		if (!dst_align.nocache)
-			cache_operation(TEE_CACHEINVALIDATE, dst_align.data,
-					dst_align.length);
-
-		if (realloc)
-			memcpy(dupdate->dst.data, dst_align.data,
-			       MIN(dupdate->dst.length, dst_align.length));
-	}
-
 final_mac_update:
 	ret = TEE_SUCCESS;
 
@@ -302,7 +270,7 @@ final_mac_update:
 		CIPHER_TRACE("Save input data %zu bytes of %zu", size_topost,
 			     dupdate->src.length);
 
-		struct caambuf cpysrc = { .data = srcbuf.data,
+		struct caambuf cpysrc = { .data = srcdata,
 					  .length = size_topost };
 
 		retstatus = caam_cpy_block_src(&ctx->blockbuf, &cpysrc, 0);
@@ -311,8 +279,9 @@ final_mac_update:
 	}
 
 end_mac:
-	if (realloc == 1)
-		caam_free_buf(&dst_align);
+	caam_dmaobj_free(&srcblock);
+	caam_dmaobj_free(&src);
+	caam_dmaobj_free(&dst);
 
 	return ret;
 }
@@ -321,32 +290,22 @@ end_mac:
  * Build and run the Cipher MAC descriptor (AES only)
  *
  * @ctx     Cipher Data context
- * @srcbuf  Input data
+ * @src     Input data
  * @dstbuf  [out] Output data if last block
  * @last    Last block flag
  */
-static TEE_Result run_cmac_desc(struct cipherdata *ctx, struct caambuf *srcbuf,
-				struct caambuf *dstbuf, bool last)
+static TEE_Result run_cmac_desc(struct cipherdata *ctx, struct caamdmaobj *src,
+				struct caamdmaobj *dst, bool last)
 {
 	TEE_Result ret = TEE_ERROR_GENERIC;
 	enum caam_status retstatus = CAAM_FAILURE;
 	struct caam_jobctx jobctx = {};
 	uint32_t *desc = NULL;
-	struct caamsgtbuf src_sgt = { .sgt_type = false };
-	struct caamsgtbuf dst_sgt = { .sgt_type = false };
 
 	desc = ctx->descriptor;
 	caam_desc_init(desc);
 	caam_desc_add_word(desc, DESC_HEADER(0));
 
-	if (last) {
-		retstatus = caam_sgt_build_block_data(&dst_sgt, NULL, dstbuf);
-		if (retstatus != CAAM_NO_ERROR) {
-			ret = TEE_ERROR_GENERIC;
-			goto end_run_cmac;
-		}
-	}
-
 	if (ctx->alg->require_key & NEED_KEY1) {
 		/* Build the descriptor */
 		caam_desc_add_word(desc, LD_KEY_PLAIN(CLASS_1, REG,
@@ -379,10 +338,8 @@ static TEE_Result run_cmac_desc(struct cipherdata *ctx, struct caambuf *srcbuf,
 		if (!ctx->ctx.data) {
 			retstatus = caam_alloc_align_buf(&ctx->ctx,
 							 ctx->alg->size_ctx);
-			if (retstatus != CAAM_NO_ERROR) {
-				ret = TEE_ERROR_OUT_OF_MEMORY;
-				goto end_run_cmac;
-			}
+			if (retstatus != CAAM_NO_ERROR)
+				return TEE_ERROR_OUT_OF_MEMORY;
 		}
 	}
 
@@ -392,7 +349,7 @@ static TEE_Result run_cmac_desc(struct cipherdata *ctx, struct caambuf *srcbuf,
 	 */
 	if (ctx->blockbuf.filled) {
 		/* Add the temporary buffer */
-		if (srcbuf->length)
+		if (src)
 			caam_desc_add_word(desc,
 					   FIFO_LD_EXT(CLASS_1, MSG, NOACTION));
 		else
@@ -407,31 +364,9 @@ static TEE_Result run_cmac_desc(struct cipherdata *ctx, struct caambuf *srcbuf,
 				ctx->blockbuf.filled);
 	}
 
-	if (srcbuf->length) {
-		retstatus = caam_sgt_build_block_data(&src_sgt, NULL, srcbuf);
-		if (retstatus != CAAM_NO_ERROR) {
-			ret = TEE_ERROR_GENERIC;
-			goto end_run_cmac;
-		}
-
-		if (src_sgt.sgt_type) {
-			/* Add the input data multiple of blocksize */
-			caam_desc_add_word(desc, FIFO_LD_SGT_EXT(CLASS_1, MSG,
-								 LAST_C1));
-			caam_desc_add_ptr(desc, virt_to_phys(src_sgt.sgt));
-			caam_desc_add_word(desc, srcbuf->length);
-
-			caam_sgt_cache_op(TEE_CACHECLEAN, &src_sgt);
-		} else {
-			/* Add the input data multiple of blocksize */
-			caam_desc_add_word(desc,
-					   FIFO_LD_EXT(CLASS_1, MSG, LAST_C1));
-			caam_desc_add_ptr(desc, srcbuf->paddr);
-			caam_desc_add_word(desc, srcbuf->length);
-
-			cache_operation(TEE_CACHECLEAN, srcbuf->data,
-					srcbuf->length);
-		}
+	if (src) {
+		caam_desc_fifo_load(desc, src, CLASS_1, MSG, LAST_C1);
+		caam_dmaobj_cache_push(src);
 	} else {
 		if (last && !ctx->blockbuf.filled) {
 			/*
@@ -447,22 +382,8 @@ static TEE_Result run_cmac_desc(struct cipherdata *ctx, struct caambuf *srcbuf,
 	ctx->blockbuf.filled = 0;
 
 	if (last) {
-		if (dst_sgt.sgt_type) {
-			caam_desc_add_word(desc, ST_SGT_NOIMM(CLASS_1, REG_CTX,
-							      dst_sgt.length));
-			caam_desc_add_ptr(desc, virt_to_phys(dst_sgt.sgt));
-
-			caam_sgt_cache_op(TEE_CACHEFLUSH, &dst_sgt);
-		} else {
-			caam_desc_add_word(desc, ST_NOIMM(CLASS_1, REG_CTX,
-							  dst_sgt.length));
-			caam_desc_add_ptr(desc, dst_sgt.buf->paddr);
-
-			if (!dst_sgt.buf->nocache)
-				cache_operation(TEE_CACHEFLUSH,
-						dst_sgt.buf->data,
-						dst_sgt.length);
-		}
+		caam_desc_store(desc, dst, CLASS_1, REG_CTX);
+		caam_dmaobj_cache_push(dst);
 	} else {
 		/* Store the context */
 		caam_desc_add_word(desc, ST_NOIMM_OFF(CLASS_1, REG_CTX,
@@ -483,22 +404,11 @@ static TEE_Result run_cmac_desc(struct cipherdata *ctx, struct caambuf *srcbuf,
 
 	if (retstatus == CAAM_NO_ERROR) {
 		ret = TEE_SUCCESS;
-
-		if (!dstbuf->nocache)
-			cache_operation(TEE_CACHEINVALIDATE, dstbuf->data,
-					dstbuf->length);
 	} else {
 		CIPHER_TRACE("CAAM Status 0x%08" PRIx32, jobctx.status);
 		ret = job_status_to_tee_result(jobctx.status);
 	}
 
-end_run_cmac:
-	if (src_sgt.sgt_type)
-		caam_sgtbuf_free(&src_sgt);
-
-	if (dst_sgt.sgt_type)
-		caam_sgtbuf_free(&dst_sgt);
-
 	return ret;
 }
 
@@ -516,44 +426,25 @@ static TEE_Result do_update_cmac(struct drvcrypt_cipher_update *dupdate)
 	size_t size_topost = 0;
 	size_t size_todo = 0;
 	size_t size_inmade = 0;
-	struct caambuf srcbuf = {};
-	int realloc = 0;
-	struct caambuf dst_align = {};
+	struct caamdmaobj src = {};
+	struct caamdmaobj dst = {};
 
 	CIPHER_TRACE("Length=%zu - %s", dupdate->src.length,
 		     dupdate->encrypt ? "Encrypt" : " Decrypt");
 
-	if (dupdate->src.length) {
-		srcbuf.data = dupdate->src.data;
-		srcbuf.length = dupdate->src.length;
-		srcbuf.paddr = virt_to_phys(dupdate->src.data);
-
-		if (!srcbuf.paddr) {
-			CIPHER_TRACE("Bad Src address");
-			return TEE_ERROR_GENERIC;
-		}
-
-		if (!caam_mem_is_cached_buf(dupdate->src.data,
-					    dupdate->src.length))
-			srcbuf.nocache = 1;
-	}
-
 	if (dupdate->last) {
-		realloc = caam_set_or_alloc_align_buf(dupdate->dst.data,
-						      &dst_align,
-						      dupdate->dst.length);
-		if (realloc == -1) {
-			CIPHER_TRACE("Destination buffer reallocation error");
-			ret = TEE_ERROR_OUT_OF_MEMORY;
-			goto end_cmac;
-		}
+		ret = caam_dmaobj_init_output(&dst, dupdate->dst.data,
+					      dupdate->dst.length,
+					      dupdate->dst.length);
+		if (ret)
+			return ret;
 	}
 
 	/* Calculate the total data to be handled */
-	fullSize = ctx->blockbuf.filled + srcbuf.length;
+	fullSize = ctx->blockbuf.filled + dupdate->src.length;
 	if (!dupdate->last) {
 		if (fullSize < ctx->alg->size_block) {
-			size_topost = srcbuf.length;
+			size_topost = dupdate->src.length;
 		} else {
 			size_topost = fullSize % ctx->alg->size_block;
 
@@ -574,21 +465,27 @@ static TEE_Result do_update_cmac(struct drvcrypt_cipher_update *dupdate)
 		     size_topost, size_todo);
 
 	if (size_todo || dupdate->last) {
-		size_inmade = srcbuf.length - size_topost;
-		srcbuf.length = size_inmade;
-
-		ret = run_cmac_desc(ctx, &srcbuf, &dst_align, dupdate->last);
-
-		srcbuf.length = dupdate->src.length;
+		size_inmade = dupdate->src.length - size_topost;
+		if (size_inmade) {
+			ret = caam_dmaobj_init_input(&src, dupdate->src.data,
+						     size_inmade);
+			if (ret)
+				goto end_cmac;
+
+			ret = run_cmac_desc(ctx, &src, &dst, dupdate->last);
+		} else {
+			ret = run_cmac_desc(ctx, NULL, &dst, dupdate->last);
+		}
 
-		if (ret == TEE_SUCCESS && dupdate->last && realloc)
-			memcpy(dupdate->dst.data, dst_align.data,
-			       dupdate->dst.length);
+		if (ret == TEE_SUCCESS && dupdate->last)
+			caam_dmaobj_copy_to_orig(&dst);
 	} else {
 		ret = TEE_SUCCESS;
 	}
 
 	if (size_topost) {
+		struct caambuf srcbuf = { .data = dupdate->src.data,
+					  .length = dupdate->src.length };
 		CIPHER_TRACE("Post %zu of input len %zu made %zu", size_topost,
 			     srcbuf.length, size_inmade);
 		if (caam_cpy_block_src(&ctx->blockbuf, &srcbuf, size_inmade) !=
@@ -597,8 +494,8 @@ static TEE_Result do_update_cmac(struct drvcrypt_cipher_update *dupdate)
 	}
 
 end_cmac:
-	if (realloc == 1)
-		caam_free_buf(&dst_align);
+	caam_dmaobj_free(&src);
+	caam_dmaobj_free(&dst);
 
 	return ret;
 }
diff --git a/core/drivers/crypto/caam/cipher/caam_cipher_xts.c b/core/drivers/crypto/caam/cipher/caam_cipher_xts.c
index 69b2bd04..c9b108be 100644
--- a/core/drivers/crypto/caam/cipher/caam_cipher_xts.c
+++ b/core/drivers/crypto/caam/cipher/caam_cipher_xts.c
@@ -45,7 +45,7 @@ static enum caam_status do_tweak_block(struct cipherdata *ctx,
 				       struct caambuf *enc_tweak,
 				       struct caambuf *srcbuf,
 				       struct caambuf *dstbuf,
-				       struct caambuf *tmp)
+				       struct caamdmaobj *tmp)
 {
 	enum caam_status retstatus = CAAM_FAILURE;
 	unsigned int idx = 0;
@@ -55,16 +55,18 @@ static enum caam_status do_tweak_block(struct cipherdata *ctx,
 	 * operation description
 	 */
 	for (idx = 0; idx < ctx->alg->size_block; idx++)
-		tmp->data[idx] = srcbuf->data[idx] ^ enc_tweak->data[idx];
+		tmp->dmabuf.data[idx] =
+			srcbuf->data[idx] ^ enc_tweak->data[idx];
 
 	retstatus = caam_cipher_block(ctx, false, NEED_KEY1, ctx->encrypt, tmp,
-				      tmp, CIPHER_BLOCK_NONE);
+				      tmp);
 
 	if (retstatus != CAAM_NO_ERROR)
 		return retstatus;
 
 	for (idx = 0; idx < ctx->alg->size_block; idx++)
-		dstbuf->data[idx] = tmp->data[idx] ^ enc_tweak->data[idx];
+		dstbuf->data[idx] =
+			tmp->dmabuf.data[idx] ^ enc_tweak->data[idx];
 
 	/* Galois field multiplication of the tweak */
 	do_galois_mult(enc_tweak);
@@ -77,9 +79,10 @@ TEE_Result caam_cipher_update_xts(struct drvcrypt_cipher_update *dupdate)
 	TEE_Result ret = TEE_ERROR_GENERIC;
 	enum caam_status retstatus = CAAM_FAILURE;
 	struct cipherdata *ctx = dupdate->ctx;
-	struct caambuf enc_tweak = {};
 	struct caambuf tmpsrc = {};
-	struct caambuf tmpdst = {};
+	struct caamdmaobj tmpdst = {};
+	struct caamdmaobj tweak = {};
+	struct caamdmaobj enc_tweak = {};
 	struct caambuf srcbuf = {};
 	struct caambuf dstbuf = {};
 	size_t idx = 0;
@@ -101,21 +104,23 @@ TEE_Result caam_cipher_update_xts(struct drvcrypt_cipher_update *dupdate)
 		return TEE_ERROR_GENERIC;
 	}
 
+	ret = caam_dmaobj_init_input(&tweak, ctx->tweak.data,
+				     ctx->tweak.length);
+	if (ret)
+		return ret;
+
 	/* First operation is to encrypt the tweak with the key #2 */
 	/* Allocate the encrypted tweak buffer */
-	retstatus = caam_alloc_align_buf(&enc_tweak, ctx->tweak.length);
-	if (retstatus != CAAM_NO_ERROR)
-		return TEE_ERROR_OUT_OF_MEMORY;
+	ret = caam_dmaobj_init_output(&enc_tweak, NULL, 0, ctx->tweak.length);
+	if (ret)
+		goto end_xts;
 
-	/* Allocate a temporary destination buffer to encrypt tweak block */
-	retstatus = caam_alloc_align_buf(&tmpdst, ctx->alg->size_block);
-	if (retstatus != CAAM_NO_ERROR) {
-		ret = TEE_ERROR_OUT_OF_MEMORY;
+	ret = caam_dmaobj_init_output(&tmpdst, NULL, 0, ctx->alg->size_block);
+	if (ret)
 		goto end_xts;
-	}
 
-	retstatus = caam_cipher_block(ctx, false, NEED_KEY2, true, &ctx->tweak,
-				      &enc_tweak, CIPHER_BLOCK_NONE);
+	retstatus = caam_cipher_block(ctx, false, NEED_KEY2, true, &tweak,
+				      &enc_tweak);
 	if (retstatus != CAAM_NO_ERROR) {
 		CIPHER_TRACE("Tweak encryption error");
 		ret = TEE_ERROR_GENERIC;
@@ -154,8 +159,8 @@ TEE_Result caam_cipher_update_xts(struct drvcrypt_cipher_update *dupdate)
 
 	for (; fullsize > 0; fullsize -= ctx->alg->size_block) {
 		CIPHER_TRACE("Tweak block fullsize %zu", fullsize);
-		retstatus = do_tweak_block(ctx, &enc_tweak, &srcbuf, &dstbuf,
-					   &tmpdst);
+		retstatus = do_tweak_block(ctx, &enc_tweak.dmabuf, &srcbuf,
+					   &dstbuf, &tmpdst);
 
 		CIPHER_TRACE("Tweak block ret 0x%" PRIx32, retstatus);
 		if (retstatus != CAAM_NO_ERROR) {
@@ -192,14 +197,16 @@ TEE_Result caam_cipher_update_xts(struct drvcrypt_cipher_update *dupdate)
 			 * In case of decryption, need to multiply
 			 * the tweak first
 			 */
-			memcpy(tmpsrc.data, enc_tweak.data, enc_tweak.length);
+			memcpy(tmpsrc.data, enc_tweak.dmabuf.data,
+			       enc_tweak.dmabuf.length);
 			do_galois_mult(&tmpsrc);
 
 			retstatus = do_tweak_block(ctx, &tmpsrc, &srcbuf,
-						   &tmpdst, &tmpdst);
+						   &tmpdst.dmabuf, &tmpdst);
 		} else {
-			retstatus = do_tweak_block(ctx, &enc_tweak, &srcbuf,
-						   &tmpdst, &tmpdst);
+			retstatus =
+				do_tweak_block(ctx, &enc_tweak.dmabuf, &srcbuf,
+					       &tmpdst.dmabuf, &tmpdst);
 		}
 
 		CIPHER_TRACE("Tweak penultimate block ret 0x%" PRIx32,
@@ -215,14 +222,14 @@ TEE_Result caam_cipher_update_xts(struct drvcrypt_cipher_update *dupdate)
 			tmpsrc.data[idx] =
 				srcbuf.data[ctx->alg->size_block + idx];
 			dstbuf.data[ctx->alg->size_block + idx] =
-				tmpdst.data[idx];
+				tmpdst.dmabuf.data[idx];
 		}
 
 		for (; idx < ctx->alg->size_block; idx++)
-			tmpsrc.data[idx] = tmpdst.data[idx];
+			tmpsrc.data[idx] = tmpdst.dmabuf.data[idx];
 
-		retstatus = do_tweak_block(ctx, &enc_tweak, &tmpsrc, &dstbuf,
-					   &tmpdst);
+		retstatus = do_tweak_block(ctx, &enc_tweak.dmabuf, &tmpsrc,
+					   &dstbuf, &tmpdst);
 
 		CIPHER_DUMPBUF("Source", tmpsrc.data, tmpsrc.length);
 		CIPHER_DUMPBUF("Dest", dstbuf.data, dstbuf.length);
@@ -236,19 +243,21 @@ TEE_Result caam_cipher_update_xts(struct drvcrypt_cipher_update *dupdate)
 
 	/* Finalize by decrypting the tweak back */
 	retstatus = caam_cipher_block(ctx, false, NEED_KEY2, false, &enc_tweak,
-				      &ctx->tweak, CIPHER_BLOCK_NONE);
+				      &tweak);
 	if (retstatus != CAAM_NO_ERROR) {
 		CIPHER_TRACE("Tweak decryption error");
 		ret = TEE_ERROR_GENERIC;
 		goto end_xts;
 	}
+	caam_dmaobj_copy_to_orig(&tweak);
 
 	ret = TEE_SUCCESS;
 
 end_xts:
-	caam_free_buf(&enc_tweak);
 	caam_free_buf(&tmpsrc);
-	caam_free_buf(&tmpdst);
+	caam_dmaobj_free(&tmpdst);
+	caam_dmaobj_free(&tweak);
+	caam_dmaobj_free(&enc_tweak);
 
 	return ret;
 }
diff --git a/core/drivers/crypto/caam/cipher/local.h b/core/drivers/crypto/caam/cipher/local.h
index 710932d7..8ed0512f 100644
--- a/core/drivers/crypto/caam/cipher/local.h
+++ b/core/drivers/crypto/caam/cipher/local.h
@@ -7,6 +7,7 @@
 #ifndef __LOCAL_H__
 #define __LOCAL_H__
 
+#include <caam_utils_dmaobj.h>
 #include <drvcrypt.h>
 #include <drvcrypt_cipher.h>
 
@@ -59,10 +60,6 @@ struct cipherdata {
 	size_t countdata;  /* MAC Number of input data done */
 };
 
-#define CIPHER_BLOCK_IN	  BIT32(1)
-#define CIPHER_BLOCK_OUT  BIT32(2)
-#define CIPHER_BLOCK_BOTH (CIPHER_BLOCK_IN | CIPHER_BLOCK_OUT)
-#define CIPHER_BLOCK_NONE 0
 /*
  * Update of the cipher operation of complete block except
  * if last block. Last block can be partial block.
@@ -73,12 +70,11 @@ struct cipherdata {
  * @encrypt  Encrypt or decrypt direction
  * @src      Source data to encrypt/decrypt
  * @dst      [out] Destination data encrypted/decrypted
- * @blocks   Additionnal data block to handle (input/output)
  */
 enum caam_status caam_cipher_block(struct cipherdata *ctx, bool savectx,
 				   uint8_t keyid, bool encrypt,
-				   struct caambuf *src, struct caambuf *dst,
-				   unsigned int blocks);
+				   struct caamdmaobj *src,
+				   struct caamdmaobj *dst);
 
 /*
  * Update of the cipher operation in xts mode.
-- 
2.17.1

