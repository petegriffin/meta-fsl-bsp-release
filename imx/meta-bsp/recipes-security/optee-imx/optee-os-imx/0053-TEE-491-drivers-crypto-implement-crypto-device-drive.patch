From 747772d36c32cfc26b07977b0cdf09866b34d27a Mon Sep 17 00:00:00 2001
From: Cedric Neveux <cedric.neveux@nxp.com>
Date: Tue, 10 Mar 2020 10:54:21 +0100
Subject: [PATCH 53/87] TEE-491 drivers: crypto: implement crypto device driver
 - DSA

Add a generic cryptographic DSA driver interface connecting
TEE Crypto generic APIs to HW driver interface

Signed-off-by: Cedric Neveux <cedric.neveux@nxp.com>
---
 core/drivers/crypto/crypto_api/acipher/dsa.c  | 213 ++++++++++++++++++
 core/drivers/crypto/crypto_api/acipher/sub.mk |   1 +
 .../crypto/crypto_api/include/drvcrypt.h      |   1 +
 .../crypto_api/include/drvcrypt_acipher.h     |  31 +++
 4 files changed, 246 insertions(+)
 create mode 100644 core/drivers/crypto/crypto_api/acipher/dsa.c

diff --git a/core/drivers/crypto/crypto_api/acipher/dsa.c b/core/drivers/crypto/crypto_api/acipher/dsa.c
new file mode 100644
index 00000000..c8771305
--- /dev/null
+++ b/core/drivers/crypto/crypto_api/acipher/dsa.c
@@ -0,0 +1,213 @@
+// SPDX-License-Identifier: BSD-2-Clause
+/*
+ * Copyright 2018-2020 NXP
+ *
+ * Crypto DSA interface implementation to enable HW driver.
+ */
+#include <crypto/crypto.h>
+#include <drvcrypt.h>
+#include <drvcrypt_acipher.h>
+
+/*
+ * Get the recommended L and N bits parameters corresponding
+ * respectively to the size of the Primes P and G (and so
+ * the Public Key and Private Key).
+ *
+ * Refer the NIST.FIPS 186-4 section 4.2
+ *
+ * @size_bits   Maximum key size bits
+ * @l_bits      [out] L size in bits
+ * @n_bits      [out] N size in bits
+ */
+static TEE_Result get_keys_size(size_t size_bits, size_t *l_bits,
+				size_t *n_bits)
+{
+	if (size_bits <= 1024)
+		*n_bits = 160;
+	else if (size_bits <= 2048)
+		*n_bits = 256;
+	else if (size_bits <= 3072)
+		*n_bits = 256;
+	else
+		return TEE_ERROR_NOT_IMPLEMENTED;
+
+	*l_bits = size_bits;
+
+	return TEE_SUCCESS;
+}
+
+TEE_Result crypto_acipher_alloc_dsa_keypair(struct dsa_keypair *key,
+					    size_t size_bits)
+{
+	TEE_Result ret = TEE_ERROR_NOT_IMPLEMENTED;
+	struct drvcrypt_dsa *dsa = NULL;
+	size_t l_bits = 0;
+	size_t n_bits = 0;
+
+	if (!key || !size_bits) {
+		CRYPTO_TRACE("Bad parameters (key @%p) (size %zu bits)", key,
+			     size_bits);
+		return TEE_ERROR_BAD_PARAMETERS;
+	}
+
+	ret = get_keys_size(size_bits, &l_bits, &n_bits);
+	if (ret == TEE_SUCCESS) {
+		dsa = drvcrypt_get_ops(CRYPTO_DSA);
+		if (dsa)
+			ret = dsa->alloc_keypair(key, l_bits, n_bits);
+	}
+
+	CRYPTO_TRACE("DSA Keypair (%zu bits) alloc ret = 0x%" PRIx32, size_bits,
+		     ret);
+	return ret;
+}
+
+TEE_Result crypto_acipher_alloc_dsa_public_key(struct dsa_public_key *key,
+					       size_t size_bits)
+{
+	TEE_Result ret = TEE_ERROR_NOT_IMPLEMENTED;
+	struct drvcrypt_dsa *dsa = NULL;
+	size_t l_bits = 0;
+	size_t n_bits = 0;
+
+	if (!key || !size_bits) {
+		CRYPTO_TRACE("Bad parameters (key @%p) (size %zu bits)", key,
+			     size_bits);
+		return TEE_ERROR_BAD_PARAMETERS;
+	}
+
+	ret = get_keys_size(size_bits, &l_bits, &n_bits);
+	if (ret == TEE_SUCCESS) {
+		dsa = drvcrypt_get_ops(CRYPTO_DSA);
+		if (dsa)
+			ret = dsa->alloc_publickey(key, l_bits, n_bits);
+		else
+			ret = TEE_ERROR_NOT_IMPLEMENTED;
+	}
+
+	CRYPTO_TRACE("DSA Public Key (%zu bits) alloc ret = 0x%" PRIx32,
+		     size_bits, ret);
+	return ret;
+}
+
+TEE_Result crypto_acipher_gen_dsa_key(struct dsa_keypair *key, size_t key_size)
+{
+	TEE_Result ret = TEE_ERROR_NOT_IMPLEMENTED;
+	struct drvcrypt_dsa *dsa = NULL;
+	size_t l_bits = 0;
+	size_t n_bits = 0;
+
+	if (!key || !key_size) {
+		CRYPTO_TRACE("Bad parameters (key @%p) (size %zu bits)", key,
+			     key_size);
+		return TEE_ERROR_BAD_PARAMETERS;
+	}
+
+	ret = get_keys_size(key_size, &l_bits, &n_bits);
+	if (ret == TEE_SUCCESS) {
+		dsa = drvcrypt_get_ops(CRYPTO_DSA);
+		if (dsa)
+			ret = dsa->gen_keypair(key, l_bits, n_bits);
+		else
+			ret = TEE_ERROR_NOT_IMPLEMENTED;
+	}
+
+	CRYPTO_TRACE("DSA Keypair (%zu bits) generate ret = 0x%" PRIx32,
+		     key_size, ret);
+
+	return ret;
+}
+
+TEE_Result crypto_acipher_dsa_sign(uint32_t algo, struct dsa_keypair *key,
+				   const uint8_t *msg, size_t msg_len,
+				   uint8_t *sig, size_t *sig_len)
+{
+	TEE_Result ret = TEE_ERROR_BAD_PARAMETERS;
+	struct drvcrypt_dsa *dsa = NULL;
+	struct drvcrypt_sign_data sdata = {};
+	size_t l_bytes = 0;
+	size_t n_bytes = 0;
+
+	if (!key || !msg || !sig || !sig_len) {
+		CRYPTO_TRACE("Input parameters reference error");
+		return ret;
+	}
+
+	/* Verify the signature length function of the key size */
+	n_bytes = crypto_bignum_num_bytes(key->q);
+	l_bytes = crypto_bignum_num_bytes(key->p);
+	if (*sig_len < 2 * n_bytes) {
+		CRYPTO_TRACE("Length (%zu) too short expected %zu bytes",
+			     *sig_len, 2 * n_bytes);
+		*sig_len = 2 * n_bytes;
+		return TEE_ERROR_SHORT_BUFFER;
+	}
+
+	dsa = drvcrypt_get_ops(CRYPTO_DSA);
+	if (dsa) {
+		sdata.algo = algo;
+		sdata.key = key;
+		sdata.size_sec = n_bytes;
+		sdata.message.data = (uint8_t *)msg;
+		sdata.message.length = msg_len;
+		sdata.signature.data = (uint8_t *)sig;
+		sdata.signature.length = *sig_len;
+
+		ret = dsa->sign(&sdata, l_bytes, n_bytes);
+
+		/* Set the signature length */
+		*sig_len = sdata.signature.length;
+	} else {
+		ret = TEE_ERROR_NOT_IMPLEMENTED;
+	}
+
+	CRYPTO_TRACE("Sign algo (0x%" PRIx32 ") returned 0x%" PRIx32, algo,
+		     ret);
+
+	return ret;
+}
+
+TEE_Result crypto_acipher_dsa_verify(uint32_t algo, struct dsa_public_key *key,
+				     const uint8_t *msg, size_t msg_len,
+				     const uint8_t *sig, size_t sig_len)
+{
+	TEE_Result ret = TEE_ERROR_BAD_PARAMETERS;
+	struct drvcrypt_dsa *dsa = NULL;
+	struct drvcrypt_sign_data sdata = {};
+	size_t l_bytes = 0;
+	size_t n_bytes = 0;
+
+	if (!key || !msg || !sig) {
+		CRYPTO_TRACE("Input parameters reference error");
+		return ret;
+	}
+
+	/* Verify the signature length function of the key size */
+	n_bytes = crypto_bignum_num_bytes(key->q);
+	l_bytes = crypto_bignum_num_bytes(key->p);
+	if (sig_len != 2 * n_bytes) {
+		CRYPTO_TRACE("Length (%zu) is invalid expected %zu bytes",
+			     sig_len, 2 * n_bytes);
+		return TEE_ERROR_SIGNATURE_INVALID;
+	}
+
+	dsa = drvcrypt_get_ops(CRYPTO_DSA);
+	if (dsa) {
+		sdata.algo = algo;
+		sdata.key = key;
+		sdata.size_sec = n_bytes;
+		sdata.message.data = (uint8_t *)msg;
+		sdata.message.length = msg_len;
+		sdata.signature.data = (uint8_t *)sig;
+		sdata.signature.length = sig_len;
+
+		ret = dsa->verify(&sdata, l_bytes, n_bytes);
+	} else {
+		ret = TEE_ERROR_NOT_IMPLEMENTED;
+	}
+
+	CRYPTO_TRACE("Verify algo (0x%" PRIx32 ") returned 0x%" PRIx32, algo,
+		     ret);
+
+	return ret;
+}
diff --git a/core/drivers/crypto/crypto_api/acipher/sub.mk b/core/drivers/crypto/crypto_api/acipher/sub.mk
index 683f56a5..b2ea7566 100644
--- a/core/drivers/crypto/crypto_api/acipher/sub.mk
+++ b/core/drivers/crypto/crypto_api/acipher/sub.mk
@@ -1,3 +1,4 @@
 srcs-$(CFG_CRYPTO_DRV_ECC) += ecc.c
 srcs-$(CFG_CRYPTO_DRV_RSA) += rsa.c rsamgf.c rsassa.c
 srcs-$(CFG_CRYPTO_DRV_DH)  += dh.c
+srcs-$(CFG_CRYPTO_DRV_DSA) += dsa.c
diff --git a/core/drivers/crypto/crypto_api/include/drvcrypt.h b/core/drivers/crypto/crypto_api/include/drvcrypt.h
index 6787355a..f25b8c92 100644
--- a/core/drivers/crypto/crypto_api/include/drvcrypt.h
+++ b/core/drivers/crypto/crypto_api/include/drvcrypt.h
@@ -55,6 +55,7 @@ enum drvcrypt_algo_id {
 	CRYPTO_ECC,	 /* Assymetric ECC driver */
 	CRYPTO_RSA,	 /* Asymmetric RSA driver */
 	CRYPTO_DH,	 /* Assymetric DH driver */
+	CRYPTO_DSA,	 /* Assymetric DSA driver */
 	CRYPTO_MATH,	 /* Mathematical driver */
 	CRYPTO_MAX_ALGO	 /* Maximum number of algo supported */
 };
diff --git a/core/drivers/crypto/crypto_api/include/drvcrypt_acipher.h b/core/drivers/crypto/crypto_api/include/drvcrypt_acipher.h
index 5a18aa9a..9b67b14c 100644
--- a/core/drivers/crypto/crypto_api/include/drvcrypt_acipher.h
+++ b/core/drivers/crypto/crypto_api/include/drvcrypt_acipher.h
@@ -182,4 +182,35 @@ static inline TEE_Result drvcrypt_register_dh(struct drvcrypt_dh *ops)
 	return drvcrypt_register(CRYPTO_DH, (void *)ops);
 }
 
+/*
+ * Crypto Library DSA driver operations
+ */
+struct drvcrypt_dsa {
+	/* Allocates the DSA keypair */
+	TEE_Result (*alloc_keypair)(struct dsa_keypair *key, size_t l_bits,
+				    size_t n_bits);
+	/* Allocates the DSA public key */
+	TEE_Result (*alloc_publickey)(struct dsa_public_key *key, size_t l_bits,
+				      size_t n_bits);
+	/* Generates the DSA keypair */
+	TEE_Result (*gen_keypair)(struct dsa_keypair *key, size_t l_bits,
+				  size_t n_bits);
+	/* DSA Sign a message and returns the signature */
+	TEE_Result (*sign)(struct drvcrypt_sign_data *sdata, size_t l_bytes,
+			   size_t n_bytes);
+	/* DSA Verify a message's signature */
+	TEE_Result (*verify)(struct drvcrypt_sign_data *sdata, size_t l_bytes,
+			     size_t n_bytes);
+};
+
+/*
+ * Register a DSA processing driver in the crypto API
+ *
+ * @ops - Driver operations in the HW layer
+ */
+static inline TEE_Result drvcrypt_register_dsa(struct drvcrypt_dsa *ops)
+{
+	return drvcrypt_register(CRYPTO_DSA, (void *)ops);
+}
+
 #endif /* __DRVCRYPT_ACIPHER_H__ */
-- 
2.17.1

