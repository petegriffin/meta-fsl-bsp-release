From f66c361f5be2dd1c4282cd44d09c6bf7a3d0bf99 Mon Sep 17 00:00:00 2001
From: Cedric Neveux <cedric.neveux@nxp.com>
Date: Fri, 27 Mar 2020 16:31:31 +0100
Subject: [PATCH 65/87] TEE-527 drivers: caam: add dmaobj descriptor functions

Add descriptor operation to handle caamdmaobj to set:
- SGT data type
- Extension length

Signed-off-by: Cedric Neveux <cedric.neveux@nxp.com>
---
 core/drivers/crypto/caam/caam_desc.c          | 55 ++++++++++++++++++-
 .../crypto/caam/include/caam_desc_defines.h   |  4 ++
 .../crypto/caam/include/caam_desc_helper.h    | 14 +++++
 3 files changed, 72 insertions(+), 1 deletion(-)

diff --git a/core/drivers/crypto/caam/caam_desc.c b/core/drivers/crypto/caam/caam_desc.c
index f11f9472..2b0e4727 100644
--- a/core/drivers/crypto/caam/caam_desc.c
+++ b/core/drivers/crypto/caam/caam_desc.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-2-Clause
 /*
- * Copyright 2019 NXP
+ * Copyright 2019-2020 NXP
  *
  * Brief   Descriptor construction functions.
  */
@@ -106,3 +106,56 @@ uint32_t caam_read_jobstatus(struct caam_outring_entry *out)
 {
 	return caam_read_val32(&out->status);
 }
+
+void caam_desc_add_dmaobj(uint32_t *desc, struct caamdmaobj *data,
+			  unsigned int pre_op)
+{
+	uint32_t operation = pre_op;
+	size_t op_length = 0;
+	uint32_t op_ext_length = 0;
+
+	if (data->sgtbuf.sgt_type)
+		operation |= CMD_SGT;
+
+	/* Check the operation length to set extension length or not */
+	switch (GET_CMD_TYPE(pre_op)) {
+	case CMD_FIFO_LOAD_TYPE:
+		op_length = FIFO_LOAD_LENGTH(data->sgtbuf.length);
+		op_ext_length = FIFO_LOAD_EXT;
+		break;
+
+	case CMD_STORE_TYPE:
+		/* Note: there is extension length for the STORE command */
+		op_length = STORE_LENGTH(data->sgtbuf.length);
+		break;
+
+	case CMD_FIFO_STORE_TYPE:
+		op_length = FIFO_STORE_LENGTH(data->sgtbuf.length);
+		op_ext_length = FIFO_STORE_EXT;
+		break;
+
+	case CMD_KEY_TYPE:
+		/* Note: there is extension length for the KEY command */
+		op_length = KEY_LENGTH(data->sgtbuf.length);
+		break;
+
+	case CMD_SEQ_OUT_TYPE:
+		op_length = SEQ_LENGTH(data->sgtbuf.length);
+		op_ext_length = SEQ_EXT;
+		break;
+
+	default:
+		break;
+	}
+
+	if (op_length == data->sgtbuf.length)
+		operation |= op_length;
+	else
+		operation |= op_ext_length;
+
+	caam_desc_add_word(desc, operation);
+	caam_desc_add_ptr(desc, data->sgtbuf.paddr);
+
+	if (op_length != data->sgtbuf.length)
+		caam_desc_add_word(desc, data->sgtbuf.length);
+}
diff --git a/core/drivers/crypto/caam/include/caam_desc_defines.h b/core/drivers/crypto/caam/include/caam_desc_defines.h
index ac150e6b..8194a4ad 100644
--- a/core/drivers/crypto/caam/include/caam_desc_defines.h
+++ b/core/drivers/crypto/caam/include/caam_desc_defines.h
@@ -13,6 +13,7 @@
  * Common Command constants
  */
 #define CMD_TYPE(cmd)		SHIFT_U32((cmd) & 0x1F, 27)
+#define GET_CMD_TYPE(op)	((op) & (SHIFT_U32(0x1F, 27)))
 #define CMD_CLASS(val)		SHIFT_U32((val) & 0x3, 25)
 #define CLASS_NO		0x0
 #define CLASS_1			0x1
@@ -550,6 +551,9 @@
 #define CMD_SEQ_IN_TYPE		CMD_TYPE(0x1E)
 #define CMD_SEQ_OUT_TYPE	CMD_TYPE(0x1F)
 
+/* Extended Length */
+#define SEQ_EXT BIT(22)
+
 /* Length */
 #define SEQ_LENGTH(len)		SHIFT_U32((len) & 0xFFFF, 0)
 
diff --git a/core/drivers/crypto/caam/include/caam_desc_helper.h b/core/drivers/crypto/caam/include/caam_desc_helper.h
index 4f481ac9..8f65c493 100644
--- a/core/drivers/crypto/caam/include/caam_desc_helper.h
+++ b/core/drivers/crypto/caam/include/caam_desc_helper.h
@@ -9,6 +9,7 @@
 
 #include <caam_desc_defines.h>
 #include <caam_jr.h>
+#include <caam_utils_dmaobj.h>
 #include <trace.h>
 
 /*
@@ -21,6 +22,19 @@ void caam_desc_init(uint32_t *desc);
 void caam_desc_update_hdr(uint32_t *desc, uint32_t word);
 void caam_desc_add_ptr(uint32_t *desc, paddr_t ptr);
 void caam_desc_add_word(uint32_t *desc, uint32_t word);
+void caam_desc_add_dmaobj(uint32_t *desc, struct caamdmaobj *data,
+			  uint32_t pre_operation);
+
+#define caam_desc_fifo_load(desc, data, cla, dst, act)                         \
+	caam_desc_add_dmaobj(desc, data, FIFO_LD(cla, dst, act, 0))
+#define caam_desc_load_key(desc, data, cla, dst)                               \
+	caam_desc_add_dmaobj(desc, data, LD_KEY_PLAIN(cla, dst, 0))
+#define caam_desc_store(desc, data, cla, src)                                  \
+	caam_desc_add_dmaobj(desc, data, ST_NOIMM(cla, src, 0))
+#define caam_desc_fifo_store(desc, data, src)                                  \
+	caam_desc_add_dmaobj(desc, data, FIFO_ST(src, 0))
+#define caam_desc_seq_out(desc, data)                                          \
+	caam_desc_add_dmaobj(desc, data, SEQ_OUT_PTR(0))
 
 /* Push/Pop descriptor rings queue */
 #ifdef CFG_CAAM_64BIT
-- 
2.17.1

