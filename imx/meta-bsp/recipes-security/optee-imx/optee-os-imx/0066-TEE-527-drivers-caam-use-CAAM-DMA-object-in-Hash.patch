From 46beaab0df3b5ac66238b640c578a7f8c34d171c Mon Sep 17 00:00:00 2001
From: Cedric Neveux <cedric.neveux@nxp.com>
Date: Wed, 25 Mar 2020 12:18:01 +0100
Subject: [PATCH 66/87] TEE-527 drivers: caam: use CAAM DMA object in Hash

Update Hash driver to use the CAAM DMA object

Signed-off-by: Cedric Neveux <cedric.neveux@nxp.com>
---
 core/drivers/crypto/caam/hash/caam_hash.c | 186 +++++-----------------
 1 file changed, 40 insertions(+), 146 deletions(-)

diff --git a/core/drivers/crypto/caam/hash/caam_hash.c b/core/drivers/crypto/caam/hash/caam_hash.c
index 7aeddf78..24f62402 100644
--- a/core/drivers/crypto/caam/hash/caam_hash.c
+++ b/core/drivers/crypto/caam/hash/caam_hash.c
@@ -7,8 +7,8 @@
 #include <caam_hal_ctrl.h>
 #include <caam_hash.h>
 #include <caam_jr.h>
+#include <caam_utils_dmaobj.h>
 #include <caam_utils_mem.h>
-#include <caam_utils_sgt.h>
 #include <caam_utils_status.h>
 #include <drvcrypt.h>
 #include <drvcrypt_hash.h>
@@ -318,8 +318,7 @@ TEE_Result caam_hash_hmac_update(struct hashctx *ctx, const uint8_t *data,
 	size_t size_topost = 0;
 	size_t size_todo = 0;
 	size_t size_inmade = 0;
-	struct caamsgtbuf src_sgt = { .sgt_type = false };
-	struct caambuf indata = { .data = (uint8_t *)data, .length = len };
+	struct caamdmaobj src = {};
 
 	HASH_TRACE("Hash/Hmac Update (%p) %p - %zu", ctx, data, len);
 
@@ -329,18 +328,6 @@ TEE_Result caam_hash_hmac_update(struct hashctx *ctx, const uint8_t *data,
 	alg = ctx->alg;
 	alg_type = alg->type;
 
-	if (data) {
-		indata.paddr = virt_to_phys((void *)data);
-		if (!indata.paddr) {
-			HASH_TRACE("Bad input data virtual address");
-			ret = TEE_ERROR_BAD_PARAMETERS;
-			goto exit_update;
-		}
-
-		if (!caam_mem_is_cached_buf(indata.data, indata.length))
-			indata.nocache = 1;
-	}
-
 	if (!ctx->ctx.data) {
 		retstatus = do_allocate_intern(ctx);
 		if (retstatus != CAAM_NO_ERROR) {
@@ -349,18 +336,24 @@ TEE_Result caam_hash_hmac_update(struct hashctx *ctx, const uint8_t *data,
 		}
 	}
 
-	HASH_TRACE("Update Type 0x%" PRIX32 " - Input @%p-%zu", alg_type,
-		   indata.data, indata.length);
+	HASH_TRACE("Update Type 0x%" PRIX32 " - Input @%p-%zu", alg_type, data,
+		   len);
 
 	/* Calculate the total data to be handled */
-	fullsize = ctx->blockbuf.filled + indata.length;
+	fullsize = ctx->blockbuf.filled + len;
 	size_topost = fullsize % alg->size_block;
 	size_todo = fullsize - size_topost;
-	size_inmade = indata.length - size_topost;
+	size_inmade = len - size_topost;
 	HASH_TRACE("FullSize %zu - posted %zu - todo %zu", fullsize,
 		   size_topost, size_todo);
 
 	if (size_todo) {
+		if (data) {
+			ret = caam_dmaobj_init_input(&src, data, size_inmade);
+			if (ret)
+				goto exit_update;
+		}
+
 		desc = ctx->descriptor;
 		caam_desc_init(desc);
 		caam_desc_add_word(desc, DESC_HEADER(0));
@@ -391,59 +384,16 @@ TEE_Result caam_hash_hmac_update(struct hashctx *ctx, const uint8_t *data,
 			ctx->ctx.length = alg->size_ctx;
 		}
 
-		/* Set the exact size of input data to use */
-		indata.length = size_inmade;
-
-		if (ctx->blockbuf.filled)
-			retstatus = caam_sgt_build_block_data(&src_sgt,
-							      &ctx->blockbuf,
-							      &indata);
-		else
-			retstatus = caam_sgt_build_block_data(&src_sgt, NULL,
-							      &indata);
-
-		if (retstatus != CAAM_NO_ERROR) {
-			ret = TEE_ERROR_GENERIC;
-			goto exit_update;
+		if (ctx->blockbuf.filled) {
+			caam_desc_add_word(desc, FIFO_LD(CLASS_2, MSG, NOACTION,
+							 ctx->blockbuf.filled));
+			caam_desc_add_ptr(desc, ctx->blockbuf.buf.paddr);
+			cache_operation(TEE_CACHECLEAN, ctx->blockbuf.buf.data,
+					ctx->blockbuf.filled);
 		}
 
-		if (src_sgt.sgt_type) {
-			if (src_sgt.length > FIFO_LOAD_MAX) {
-				caam_desc_add_word(desc,
-						   FIFO_LD_SGT_EXT(CLASS_2, MSG,
-								   LAST_C2));
-				caam_desc_add_ptr(desc,
-						  virt_to_phys(src_sgt.sgt));
-				caam_desc_add_word(desc, src_sgt.length);
-			} else {
-				caam_desc_add_word(desc,
-						   FIFO_LD_SGT(CLASS_2, MSG,
-							       LAST_C2,
-							       src_sgt.length));
-				caam_desc_add_ptr(desc,
-						  virt_to_phys(src_sgt.sgt));
-			}
-			caam_sgt_cache_op(TEE_CACHECLEAN, &src_sgt);
-		} else {
-			if (src_sgt.length > FIFO_LOAD_MAX) {
-				caam_desc_add_word(desc,
-						   FIFO_LD_EXT(CLASS_2, MSG,
-							       LAST_C2));
-				caam_desc_add_ptr(desc, src_sgt.buf->paddr);
-				caam_desc_add_word(desc, src_sgt.length);
-			} else {
-				caam_desc_add_word(desc,
-						   FIFO_LD(CLASS_2, MSG,
-							   LAST_C2,
-							   src_sgt.length));
-				caam_desc_add_ptr(desc, src_sgt.buf->paddr);
-			}
-
-			if (!src_sgt.buf->nocache)
-				cache_operation(TEE_CACHECLEAN,
-						src_sgt.buf->data,
-						src_sgt.length);
-		}
+		caam_desc_fifo_load(desc, &src, CLASS_2, MSG, LAST_C2);
+		caam_dmaobj_cache_push(&src);
 
 		ctx->blockbuf.filled = 0;
 
@@ -471,27 +421,24 @@ TEE_Result caam_hash_hmac_update(struct hashctx *ctx, const uint8_t *data,
 	} else {
 		ret = TEE_SUCCESS;
 
-		if (size_topost) {
-			/* All input data must be saved */
+		/* All input data must be saved */
+		if (size_topost)
 			size_inmade = 0;
-		}
 	}
 
 	if (size_topost && data) {
-		/*
-		 * Set the full data size of the input buffer.
-		 * indata.length has been changed when creating the SGT
-		 * object.
-		 */
-		indata.length = len;
 		HASH_TRACE("Posted %zu of input len %zu made %zu", size_topost,
-			   indata.length, size_inmade);
-		ret = caam_cpy_block_src(&ctx->blockbuf, &indata, size_inmade);
+			   len, size_inmade);
+
+		struct caambuf srcdata = {
+			.data = (uint8_t *)data,
+			.length = len,
+		};
+		ret = caam_cpy_block_src(&ctx->blockbuf, &srcdata, size_inmade);
 	}
 
 exit_update:
-	if (src_sgt.sgt_type)
-		caam_sgtbuf_free(&src_sgt);
+	caam_dmaobj_free(&src);
 
 	if (ret != TEE_SUCCESS)
 		do_free_intern(ctx);
@@ -507,9 +454,7 @@ TEE_Result caam_hash_hmac_final(struct hashctx *ctx, uint8_t *digest,
 	const struct hashalg *alg = NULL;
 	struct caam_jobctx jobctx = {};
 	uint32_t *desc = NULL;
-	int realloc = 0;
-	struct caambuf digest_align = {};
-	struct caamsgtbuf sgtdigest = { .sgt_type = false };
+	struct caamdmaobj dig = {};
 
 	HASH_TRACE("Hash/Hmac Final (%p)", ctx);
 
@@ -526,39 +471,12 @@ TEE_Result caam_hash_hmac_final(struct hashctx *ctx, uint8_t *digest,
 		}
 	}
 
-	if (alg->size_digest > len) {
-		HASH_TRACE("Digest buffer size %" PRId8 " too short (%zu)",
-			   alg->size_digest, len);
-
-		retstatus =
-			caam_alloc_align_buf(&digest_align, alg->size_digest);
-		if (retstatus != CAAM_NO_ERROR) {
-			HASH_TRACE("Digest reallocation error");
-			ret = TEE_ERROR_OUT_OF_MEMORY;
-			goto exit_final;
-		}
-		realloc = 1;
-	} else {
-		realloc =
-			caam_set_or_alloc_align_buf(digest, &digest_align, len);
-
-		if (realloc == -1) {
-			HASH_TRACE("Digest reallocation error");
-			ret = TEE_ERROR_OUT_OF_MEMORY;
-			goto exit_final;
-		}
-
-		retstatus = caam_sgt_build_block_data(&sgtdigest, NULL,
-						      &digest_align);
-
-		if (retstatus != CAAM_NO_ERROR) {
-			ret = TEE_ERROR_OUT_OF_MEMORY;
-			goto exit_final;
-		}
-	}
+	ret = caam_dmaobj_init_output(&dig, digest, len, alg->size_digest);
+	if (ret)
+		goto exit_final;
 
 	HASH_TRACE("Final Type 0x%" PRIX32 " - Digest @%p-%zu", alg->type,
-		   digest_align.data, len);
+		   dig.dmabuf.data, len);
 
 	desc = ctx->descriptor;
 	caam_desc_init(desc);
@@ -609,21 +527,8 @@ TEE_Result caam_hash_hmac_final(struct hashctx *ctx, uint8_t *digest,
 	ctx->blockbuf.filled = 0;
 
 	/* Save the final digest */
-	if (sgtdigest.sgt_type) {
-		caam_desc_add_word(desc, ST_SGT_NOIMM(CLASS_2, REG_CTX,
-						      alg->size_digest));
-		caam_desc_add_ptr(desc, virt_to_phys(sgtdigest.sgt));
-
-		caam_sgt_cache_op(TEE_CACHEFLUSH, &sgtdigest);
-	} else {
-		caam_desc_add_word(desc, ST_NOIMM(CLASS_2, REG_CTX,
-						  alg->size_digest));
-		caam_desc_add_ptr(desc, digest_align.paddr);
-
-		if (digest_align.nocache == 0)
-			cache_operation(TEE_CACHEFLUSH, digest_align.data,
-					alg->size_digest);
-	}
+	caam_desc_store(desc, &dig, CLASS_2, REG_CTX);
+	caam_dmaobj_cache_push(&dig);
 
 	HASH_DUMPDESC(desc);
 
@@ -631,16 +536,9 @@ TEE_Result caam_hash_hmac_final(struct hashctx *ctx, uint8_t *digest,
 	retstatus = caam_jr_enqueue(&jobctx, NULL);
 
 	if (retstatus == CAAM_NO_ERROR) {
-		/* Ensure that hash data are correct in cache */
-		if (digest_align.nocache == 0)
-			cache_operation(TEE_CACHEINVALIDATE, digest_align.data,
-					alg->size_digest);
-
-		if (realloc)
-			memcpy(digest, digest_align.data, len);
+		caam_dmaobj_copy_to_orig(&dig);
 
-		HASH_DUMPBUF("Digest", digest_align.data,
-			     (size_t)alg->size_digest);
+		HASH_DUMPBUF("Digest", digest, (size_t)alg->size_digest);
 
 		ret = TEE_SUCCESS;
 	} else {
@@ -649,11 +547,7 @@ TEE_Result caam_hash_hmac_final(struct hashctx *ctx, uint8_t *digest,
 	}
 
 exit_final:
-	if (realloc == 1)
-		caam_free_buf(&digest_align);
-
-	if (sgtdigest.sgt_type)
-		caam_sgtbuf_free(&sgtdigest);
+	caam_dmaobj_free(&dig);
 
 	return ret;
 }
-- 
2.17.1

