From 7fbf0777cecda8d9dce3a4e0110446693b2ca7a1 Mon Sep 17 00:00:00 2001
From: Alexandre Jutras <alexandre.jutras@nxp.com>
Date: Wed, 6 Mar 2019 17:14:20 -0500
Subject: [PATCH 25/87] ta/avb: Adjust AVB operations based on CFG_RPMB_FS
 configuration

Signed-off-by: Alexandre Jutras <alexandre.jutras@nxp.com>
---
 ta/avb/entry.c | 82 ++++++++++++++++++++++++++++----------------------
 1 file changed, 46 insertions(+), 36 deletions(-)

diff --git a/ta/avb/entry.c b/ta/avb/entry.c
index 9a8bf21b..e2559c46 100644
--- a/ta/avb/entry.c
+++ b/ta/avb/entry.c
@@ -8,9 +8,7 @@
 #include <string.h>
 #include <util.h>
 
-#define AVB_WITHOUT_RPMB 1
-
-#define DEFAULT_LOCK_STATE	0
+#define DEFAULT_LOCK_STATE	1
 
 static const uint32_t storageid = TEE_STORAGE_PRIVATE_RPMB;
 static const char rb_obj_name[] = "rb_state";
@@ -78,23 +76,17 @@ static TEE_Result read_rb_idx(uint32_t pt, TEE_Param params[TEE_NUM_PARAMS])
 						TEE_PARAM_TYPE_VALUE_OUTPUT,
 						TEE_PARAM_TYPE_NONE,
 						TEE_PARAM_TYPE_NONE);
-#ifndef AVB_WITHOUT_RPMB
+
+#ifdef CFG_RPMB_FS
 	size_t slot_offset;
 	uint64_t idx;
 	uint32_t count;
 	TEE_Result res;
 	TEE_ObjectHandle h;
-#endif
 
 	if (pt != exp_pt)
 		return TEE_ERROR_BAD_PARAMETERS;
 
-#ifdef AVB_WITHOUT_RPMB
-	/* Rollback index is hardcoded to 0. */
-	params[1].value.a = 0;
-	params[1].value.b = 0;
-	return TEE_SUCCESS;
-#else
 	res = get_slot_offset(params[0].value.a, &slot_offset);
 	if (res)
 		return res;
@@ -133,6 +125,14 @@ static TEE_Result read_rb_idx(uint32_t pt, TEE_Param params[TEE_NUM_PARAMS])
 out:
 	TEE_CloseObject(h);
 	return res;
+#else
+	if (pt != exp_pt)
+		return TEE_ERROR_BAD_PARAMETERS;
+
+	/* Without RPMB support, rollback index is hardcoded to 0. */
+	params[1].value.a = 0;
+	params[1].value.b = 0;
+	return TEE_SUCCESS;
 #endif
 }
 
@@ -142,22 +142,18 @@ static TEE_Result write_rb_idx(uint32_t pt, TEE_Param params[TEE_NUM_PARAMS])
 						TEE_PARAM_TYPE_VALUE_INPUT,
 						TEE_PARAM_TYPE_NONE,
 						TEE_PARAM_TYPE_NONE);
-#ifndef AVB_WITHOUT_RPMB
+
+#ifdef CFG_RPMB_FS
 	size_t slot_offset;
 	uint64_t widx;
 	uint64_t idx;
 	uint32_t count;
 	TEE_Result res;
 	TEE_ObjectHandle h;
-#endif
 
 	if (pt != exp_pt)
 		return TEE_ERROR_BAD_PARAMETERS;
 
-#ifdef AVB_WITHOUT_RPMB
-    /* Pretend the rollback index has been updated. */
-    return TEE_SUCCESS;
-#else
 	res = get_slot_offset(params[0].value.a, &slot_offset);
 	if (res)
 		return res;
@@ -190,6 +186,13 @@ static TEE_Result write_rb_idx(uint32_t pt, TEE_Param params[TEE_NUM_PARAMS])
 out:
 	TEE_CloseObject(h);
 	return res;
+#else
+	if (pt != exp_pt)
+		return TEE_ERROR_BAD_PARAMETERS;
+
+    /* Without RPMB support, just pretend the rollback index has been
+     * updated. */
+    return TEE_SUCCESS;
 #endif
 }
 
@@ -199,21 +202,16 @@ static TEE_Result read_lock_state(uint32_t pt, TEE_Param params[TEE_NUM_PARAMS])
 						TEE_PARAM_TYPE_NONE,
 						TEE_PARAM_TYPE_NONE,
 						TEE_PARAM_TYPE_NONE);
-#ifndef AVB_WITHOUT_RPMB
+
+#ifdef CFG_RPMB_FS
 	uint32_t lock_state;
 	uint32_t count;
 	TEE_Result res;
 	TEE_ObjectHandle h;
-#endif
 
 	if (pt != exp_pt)
 		return TEE_ERROR_BAD_PARAMETERS;
 
-#ifdef AVB_WITHOUT_RPMB
-	// Lock mode is hardcoded to 'locked'
-	params[0].value.a = 1;
-	return TEE_SUCCESS;
-#else
 	res = open_rb_state(DEFAULT_LOCK_STATE, &h);
 	if (res)
 		return res;
@@ -235,6 +233,13 @@ out:
 	TEE_CloseObject(h);
 
 	return res;
+#else
+	if (pt != exp_pt)
+		return TEE_ERROR_BAD_PARAMETERS;
+
+	// Without RPMB support, lock mode is hardcoded to 'locked'
+	params[0].value.a = 1;
+	return TEE_SUCCESS;
 #endif
 }
 
@@ -245,21 +250,17 @@ static TEE_Result write_lock_state(uint32_t pt,
 						TEE_PARAM_TYPE_NONE,
 						TEE_PARAM_TYPE_NONE,
 						TEE_PARAM_TYPE_NONE);
-#ifndef AVB_WITHOUT_RPMB
+
+#ifdef CFG_RPMB_FS
 	uint32_t wlock_state;
 	uint32_t lock_state;
 	uint32_t count;
 	TEE_Result res;
 	TEE_ObjectHandle h;
-#endif
 
 	if (pt != exp_pt)
 		return TEE_ERROR_BAD_PARAMETERS;
 
-#ifdef AVB_WITHOUT_RPMB
-	/* Pretend that the lock mode has been updated. */
-	return TEE_SUCCESS;
-#else
 	wlock_state = params[0].value.a;
 
 	res = open_rb_state(wlock_state, &h);
@@ -276,15 +277,20 @@ static TEE_Result write_lock_state(uint32_t pt,
 out:
 	TEE_CloseObject(h);
 	return res;
+#else
+	if (pt != exp_pt)
+		return TEE_ERROR_BAD_PARAMETERS;
+
+	/* Without RPMB support, just pretend that the lock mode has been
+	 * updated. */
+	return TEE_SUCCESS;
 #endif
 }
 
 static TEE_Result write_persist_value(uint32_t pt,
 				      TEE_Param params[TEE_NUM_PARAMS])
 {
-#ifdef AVB_WITHOUT_RPMB
-	return TEE_ERROR_NOT_SUPPORTED;
-#else
+#ifdef CFG_RPMB_FS
 	const uint32_t exp_pt = TEE_PARAM_TYPES(TEE_PARAM_TYPE_MEMREF_INPUT,
 						TEE_PARAM_TYPE_MEMREF_INPUT,
 						TEE_PARAM_TYPE_NONE,
@@ -322,15 +328,16 @@ static TEE_Result write_persist_value(uint32_t pt,
 	TEE_CloseObject(h);
 
 	return res;
+#else
+	/* Without RPMB support, writing persist value is not supported. */
+	return TEE_ERROR_NOT_SUPPORTED;
 #endif
 }
 
 static TEE_Result read_persist_value(uint32_t pt,
 				      TEE_Param params[TEE_NUM_PARAMS])
 {
-#ifdef AVB_WITHOUT_RPMB
-	return TEE_ERROR_NOT_SUPPORTED;
-#else
+#ifdef CFG_RPMB_FS
 	const uint32_t exp_pt = TEE_PARAM_TYPES(TEE_PARAM_TYPE_MEMREF_INPUT,
 						TEE_PARAM_TYPE_MEMREF_INOUT,
 						TEE_PARAM_TYPE_NONE,
@@ -376,6 +383,9 @@ out:
 	TEE_CloseObject(h);
 
 	return res;
+#else
+	/* Without RPMB support, reading persist value is not supported. */
+	return TEE_ERROR_NOT_SUPPORTED;
 #endif
 }
 
-- 
2.17.1

