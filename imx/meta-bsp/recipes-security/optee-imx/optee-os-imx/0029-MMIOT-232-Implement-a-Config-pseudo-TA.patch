From 592f524155684476f5445010dc3b2056ffb11445 Mon Sep 17 00:00:00 2001
From: Olivier Masse <olivier.masse@nxp.com>
Date: Wed, 4 Mar 2020 15:42:03 +0100
Subject: [PATCH 29/87] MMIOT-232: Implement a Config pseudo TA

The Config TA controls the configuration for the RPMB driver. The
CONFIG_CMD_SET_RPMB_CONFIG command configures the RPMB in allowed/blocked
state. This configuration can only be performed once per boot cycle.
uboot typically configures RPMB as blocked when the device is in unlocked
state.

Signed-off-by: Alexandre Jutras <alexandre.jutras@nxp.com>
---
 core/pta/config.c | 72 +++++++++++++++++++++++++++++++++++++++++++++++
 core/pta/sub.mk   |  2 ++
 2 files changed, 74 insertions(+)
 create mode 100644 core/pta/config.c

diff --git a/core/pta/config.c b/core/pta/config.c
new file mode 100644
index 00000000..61fcc581
--- /dev/null
+++ b/core/pta/config.c
@@ -0,0 +1,72 @@
+// SPDX-License-Identifier: BSD-2-Clause
+/*
+ * Copyright (c) 2019, NXP
+ */
+#include <compiler.h>
+#include <stdio.h>
+#include <trace.h>
+#include <kernel/pseudo_ta.h>
+#include <tee_fs.h>
+
+#define TA_NAME		"config.ta"
+
+#define TA_CONFIG_UUID \
+		{ 0x57e72d42, 0xdd00, 0x4930, \
+			{ 0xb6, 0xfa, 0x31, 0xe4, 0x7e, 0x91, 0x96, 0xc0 } }
+
+#define CONFIG_CMD_SET_RPMB_CONFIG 0
+
+#define CONFIG_RPMB_UNINITIALIZED 0
+#define CONFIG_RPMB_ALLOWED		  1
+#define CONFIG_RPMB_BLOCKED 	  2
+
+static unsigned int wConfig = CONFIG_RPMB_UNINITIALIZED;
+
+static TEE_Result set_rpmb_config(uint32_t type, TEE_Param p[TEE_NUM_PARAMS])
+{
+	unsigned int config = CONFIG_RPMB_UNINITIALIZED;
+
+	if (TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT,
+			    TEE_PARAM_TYPE_NONE,
+			    TEE_PARAM_TYPE_NONE,
+			    TEE_PARAM_TYPE_NONE) != type) {
+		return TEE_ERROR_BAD_PARAMETERS;
+	}
+
+	if(wConfig != CONFIG_RPMB_UNINITIALIZED) {
+		EMSG("RPMB configuration is already set");
+		return TEE_ERROR_ACCESS_DENIED;
+	}
+
+	config = p[0].value.a;
+	if(config == CONFIG_RPMB_ALLOWED) {
+		wConfig = CONFIG_RPMB_ALLOWED;
+		tee_rpmb_fs_configure(false); /* allowed */
+	} else {
+		wConfig = CONFIG_RPMB_BLOCKED;
+		tee_rpmb_fs_configure(true); /* blocked */
+	}
+
+	return TEE_SUCCESS;
+}
+
+/*
+ * Trusted Application Entry Points
+ */
+
+static TEE_Result invoke_command(void *psess __unused,
+				 uint32_t cmd, uint32_t ptypes,
+				 TEE_Param params[TEE_NUM_PARAMS])
+{
+	switch (cmd) {
+	case CONFIG_CMD_SET_RPMB_CONFIG:
+		return set_rpmb_config(ptypes, params);
+	default:
+		break;
+	}
+	return TEE_ERROR_BAD_PARAMETERS;
+}
+
+pseudo_ta_register(.uuid = TA_CONFIG_UUID, .name = TA_NAME,
+		   .flags = PTA_DEFAULT_FLAGS,
+		   .invoke_command_entry_point = invoke_command);
diff --git a/core/pta/sub.mk b/core/pta/sub.mk
index eff2ddfe..644dac54 100644
--- a/core/pta/sub.mk
+++ b/core/pta/sub.mk
@@ -9,3 +9,5 @@ srcs-$(CFG_SECSTOR_TA_MGMT_PTA) += secstor_ta_mgmt.c
 endif
 srcs-$(CFG_WITH_STATS) += stats.c
 srcs-$(CFG_SYSTEM_PTA) += system.c
+srcs-y += config.c
+cppflags-config.c-y += -Icore/include/tee
-- 
2.17.1

