From ed4b1b23916d9ab35a4508817c37bbd42041b194 Mon Sep 17 00:00:00 2001
From: Clement Faure <clement.faure@nxp.com>
Date: Fri, 3 Apr 2020 17:03:54 +0200
Subject: [PATCH 59/87] TEE-539 drivers: caam: use pointers to out/inring_entry
 for CAAM
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Use pointers to outring_entry and inring_entry as input for
caam_desc_pop(), caam_desc_push() and caam_desc_jobstatus() functions.

This quick re-work originaly comes from the initiative to get rid of a
GGC 9.2 warning -Waddress-of-packed-member

core/drivers/crypto/caam/caam_jr.c: In function ‘do_jr_dequeue’:
core/drivers/crypto/caam/caam_jr.c:262:22: warning: taking address of packed member of ‘struct outring_entry’ may result in an unaligned pointer value [-Waddress-of-packed-member]
  262 |    if (caam_desc_pop(&jr_out->desc) == caller->pdesc) {
      |                      ^~~~~~~~~~~~~
core/drivers/crypto/caam/caam_jr.c:265:26: warning: taking address of packed member of ‘struct outring_entry’ may result in an unaligned pointer value [-Waddress-of-packed-member]
  265 |      caam_read_jobstatus(&jr_out->status);
      |                          ^~~~~~~~~~~~~~~

By doing this, we let the function safely extracting the field.

Signed-off-by: Clement Faure <clement.faure@nxp.com>
---
 core/drivers/crypto/caam/caam_desc.c          | 28 ++++++----
 core/drivers/crypto/caam/caam_jr.c            | 55 +++++--------------
 .../crypto/caam/include/caam_desc_helper.h    | 11 ++--
 core/drivers/crypto/caam/include/caam_jr.h    | 28 ++++++++++
 4 files changed, 63 insertions(+), 59 deletions(-)

diff --git a/core/drivers/crypto/caam/caam_desc.c b/core/drivers/crypto/caam/caam_desc.c
index c9b3c46c..f11f9472 100644
--- a/core/drivers/crypto/caam/caam_desc.c
+++ b/core/drivers/crypto/caam/caam_desc.c
@@ -69,36 +69,40 @@ void caam_desc_add_ptr(uint32_t *desc, paddr_t ptr)
 }
 
 #ifdef CFG_CAAM_64BIT
-void caam_desc_push(uint64_t *in_entry, paddr_t paddr)
+/*
+ * Functions [put/get]_[le/be]64() handle 32bits words operations, meaning that
+ * words can be 4 bytes aligned.
+ */
+void caam_desc_push(struct caam_inring_entry *in_entry, paddr_t paddr)
 {
 #ifdef CFG_CAAM_BIG_ENDIAN
-	put_be64(in_entry, paddr);
+	put_be64(&in_entry->desc, paddr);
 #else
-	put_le64(in_entry, paddr);
+	put_le64(&in_entry->desc, paddr);
 #endif /* CFG_CAAM_BIG_ENDIAN */
 }
 
-paddr_t caam_desc_pop(uint64_t *out_entry)
+paddr_t caam_desc_pop(struct caam_outring_entry *out_entry)
 {
 #ifdef CFG_CAAM_BIG_ENDIAN
-	return get_be64(out_entry);
+	return get_be64(&out_entry->desc);
 #else
-	return get_le64(out_entry);
+	return get_le64(&out_entry->desc);
 #endif /* CFG_CAAM_BIG_ENDIAN */
 }
 #else /* CFG_CAAM_64BIT */
-void caam_desc_push(uint32_t *in_entry, paddr_t paddr)
+void caam_desc_push(struct caam_inring_entry *in_entry, paddr_t paddr)
 {
-	caam_write_val32(in_entry, paddr);
+	caam_write_val32(&in_entry->desc, paddr);
 }
 
-paddr_t caam_desc_pop(uint32_t *out_entry)
+paddr_t caam_desc_pop(struct caam_outring_entry *out_entry)
 {
-	return caam_read_val32(out_entry);
+	return caam_read_val32(&out_entry->desc);
 }
 #endif /* CFG_CAAM_64BIT */
 
-uint32_t caam_read_jobstatus(uint32_t *addr)
+uint32_t caam_read_jobstatus(struct caam_outring_entry *out)
 {
-	return caam_read_val32(addr);
+	return caam_read_val32(&out->status);
 }
diff --git a/core/drivers/crypto/caam/caam_jr.c b/core/drivers/crypto/caam/caam_jr.c
index ab71504b..49eeca7b 100644
--- a/core/drivers/crypto/caam/caam_jr.c
+++ b/core/drivers/crypto/caam/caam_jr.c
@@ -20,34 +20,6 @@
 #include <mm/core_memprot.h>
 #include <tee/cache.h>
 
-/*
- * The CAAM physical address is decorrelated from the CPU addressing mode.
- * CAAM can manage 32 or 64 bits address depending on its version and the
- * device.
- */
-/*
- * Definition of input and output ring object
- */
-#ifdef CFG_CAAM_64BIT
-struct inring_entry {
-	uint64_t desc;   /* Physical address of the descriptor */
-};
-
-struct __packed outring_entry {
-	uint64_t desc;   /* Physical address of the descriptor */
-	uint32_t status; /* Status of the executed job */
-} __aligned(__alignof__(void *));
-#else
-struct inring_entry {
-	uint32_t desc;   /* Physical address of the descriptor */
-};
-
-struct __packed outring_entry {
-	uint32_t desc;   /* Physical address of the descriptor */
-	uint32_t status; /* Status of the executed job */
-} __aligned(__alignof__(void *));
-#endif /* CFG_CAAM_64BIT */
-
 /*
  * Job Free define
  */
@@ -76,12 +48,12 @@ struct jr_privdata {
 	uint8_t nb_jobs;         /* Number of Job ring entries managed */
 
 	/* Input Job Ring Variables */
-	struct inring_entry *inrings; /* Input JR HW queue */
+	struct caam_inring_entry *inrings; /* Input JR HW queue */
 	unsigned int inlock;          /* Input JR spin lock */
 	uint16_t inwrite_index;       /* SW Index - next JR entry free */
 
 	/* Output Job Ring Variables */
-	struct outring_entry *outrings; /* Output JR HW queue */
+	struct caam_outring_entry *outrings; /* Output JR HW queue */
 	unsigned int outlock;           /* Output JR spin lock */
 	uint16_t outread_index;         /* SW Index - next JR output done */
 
@@ -137,9 +109,9 @@ static enum caam_status do_jr_alloc(struct jr_privdata **privdata,
 
 	/* Allocate the input and output job ring queues */
 	jr_priv->inrings =
-		caam_calloc_align(nb_jobs * sizeof(struct inring_entry));
+		caam_calloc_align(nb_jobs * sizeof(struct caam_inring_entry));
 	jr_priv->outrings =
-		caam_calloc_align(nb_jobs * sizeof(struct outring_entry));
+		caam_calloc_align(nb_jobs * sizeof(struct caam_outring_entry));
 
 	/* Allocate the callers information */
 	jr_priv->callers = caam_calloc(nb_jobs * sizeof(struct caller_info));
@@ -163,9 +135,9 @@ static enum caam_status do_jr_alloc(struct jr_privdata **privdata,
 	 * memory
 	 */
 	cache_operation(TEE_CACHEFLUSH, jr_priv->inrings,
-			nb_jobs * sizeof(struct inring_entry));
+			nb_jobs * sizeof(struct caam_inring_entry));
 	cache_operation(TEE_CACHEFLUSH, jr_priv->outrings,
-			nb_jobs * sizeof(struct outring_entry));
+			nb_jobs * sizeof(struct caam_outring_entry));
 
 	retstatus = CAAM_NO_ERROR;
 end_alloc:
@@ -206,7 +178,7 @@ static uint32_t do_jr_dequeue(uint32_t wait_job_ids)
 {
 	uint32_t ret_job_id = 0;
 	struct caller_info *caller = NULL;
-	struct outring_entry *jr_out = NULL;
+	struct caam_outring_entry *jr_out = NULL;
 	struct caam_jobctx *jobctx = NULL;
 	uint32_t exceptions = 0;
 	bool found = false;
@@ -239,7 +211,7 @@ static uint32_t do_jr_dequeue(uint32_t wait_job_ids)
 	}
 
 	cache_operation(TEE_CACHEINVALIDATE, jr_out,
-			sizeof(struct outring_entry) * nb_jobs_inv);
+			sizeof(struct caam_outring_entry) * nb_jobs_inv);
 
 	for (; nb_jobs_done; nb_jobs_done--) {
 		jr_out = &jr_privdata->outrings[jr_privdata->outread_index];
@@ -259,10 +231,9 @@ static uint32_t do_jr_dequeue(uint32_t wait_job_ids)
 			 * buffer
 			 */
 			caller = &jr_privdata->callers[idx_jr];
-			if (caam_desc_pop(&jr_out->desc) == caller->pdesc) {
+			if (caam_desc_pop(jr_out) == caller->pdesc) {
 				jobctx = caller->jobctx;
-				jobctx->status =
-					caam_read_jobstatus(&jr_out->status);
+				jobctx->status = caam_read_jobstatus(jr_out);
 
 				/* Update return Job IDs mask */
 				if (caller->job_id & wait_job_ids)
@@ -318,7 +289,7 @@ static enum caam_status do_jr_enqueue(struct caam_jobctx *jobctx,
 				      uint32_t *job_id)
 {
 	enum caam_status retstatus = CAAM_BUSY;
-	struct inring_entry *cur_inrings = NULL;
+	struct caam_inring_entry *cur_inrings = NULL;
 	struct caller_info *caller = NULL;
 	uint32_t exceptions = 0;
 	uint32_t job_mask = 0;
@@ -380,11 +351,11 @@ static enum caam_status do_jr_enqueue(struct caam_jobctx *jobctx,
 	cur_inrings = &jr_privdata->inrings[jr_privdata->inwrite_index];
 
 	/* Push the descriptor into the JR HW list */
-	caam_desc_push(&cur_inrings->desc, caller->pdesc);
+	caam_desc_push(cur_inrings, caller->pdesc);
 
 	/* Ensure that physical memory is up to date */
 	cache_operation(TEE_CACHECLEAN, cur_inrings,
-			sizeof(struct inring_entry));
+			sizeof(struct caam_inring_entry));
 
 	/*
 	 * Increment index to next JR input entry taking care that
diff --git a/core/drivers/crypto/caam/include/caam_desc_helper.h b/core/drivers/crypto/caam/include/caam_desc_helper.h
index 3afd1f12..dd9b5b3c 100644
--- a/core/drivers/crypto/caam/include/caam_desc_helper.h
+++ b/core/drivers/crypto/caam/include/caam_desc_helper.h
@@ -8,6 +8,7 @@
 #define __CAAM_DESC_HELPER_H__
 
 #include <caam_desc_defines.h>
+#include <caam_jr.h>
 #include <trace.h>
 
 /*
@@ -23,14 +24,14 @@ void caam_desc_add_word(uint32_t *desc, uint32_t word);
 
 /* Push/Pop descriptor rings queue */
 #ifdef CFG_CAAM_64BIT
-void caam_desc_push(uint64_t *in_entry, paddr_t paddr);
-paddr_t caam_desc_pop(uint64_t *out_entry);
+void caam_desc_push(struct caam_inring_entry *in_entry, paddr_t paddr);
+paddr_t caam_desc_pop(struct caam_outring_entry *out_entry);
 #else
-void caam_desc_push(uint32_t *in_entry, paddr_t paddr);
-paddr_t caam_desc_pop(uint32_t *out_entry);
+void caam_desc_push(struct caam_inring_entry *in_entry, paddr_t paddr);
+paddr_t caam_desc_pop(struct caam_outring_entry *out_entry);
 #endif /* CFG_CAAM_64BIT */
 
-uint32_t caam_read_jobstatus(uint32_t *addr);
+uint32_t caam_read_jobstatus(struct caam_outring_entry *out);
 
 /* Debug print function to dump a Descriptor in hex */
 static inline void dump_desc(uint32_t *desc)
diff --git a/core/drivers/crypto/caam/include/caam_jr.h b/core/drivers/crypto/caam/include/caam_jr.h
index c8e99f03..507e2ed9 100644
--- a/core/drivers/crypto/caam/include/caam_jr.h
+++ b/core/drivers/crypto/caam/include/caam_jr.h
@@ -32,6 +32,34 @@ struct caam_jrcfg {
 	uint8_t nb_jobs; /* Number of Jobs to managed */
 };
 
+/*
+ * The CAAM physical address is decorrelated from the CPU addressing mode.
+ * CAAM can manage 32 or 64 bits address depending on its version and the
+ * device.
+ */
+/*
+ * Definition of input and output ring object
+ */
+#ifdef CFG_CAAM_64BIT
+struct caam_inring_entry {
+	uint64_t desc; /* Physical address of the descriptor */
+};
+
+struct __packed caam_outring_entry {
+	uint64_t desc;	 /* Physical address of the descriptor */
+	uint32_t status; /* Status of the executed job */
+};
+#else
+struct caam_inring_entry {
+	uint32_t desc; /* Physical address of the descriptor */
+};
+
+struct __packed caam_outring_entry {
+	uint32_t desc;	 /* Physical address of the descriptor */
+	uint32_t status; /* Status of the executed job */
+};
+#endif /* CFG_CAAM_64BIT */
+
 /*
  * Initialization of the CAAM Job Ring module
  *
-- 
2.17.1

