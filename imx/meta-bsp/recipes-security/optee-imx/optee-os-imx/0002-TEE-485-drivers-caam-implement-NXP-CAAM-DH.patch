From 8efc904996e916fb5511b4ae11a8546afb0c513e Mon Sep 17 00:00:00 2001
From: Cedric Neveux <cedric.neveux@nxp.com>
Date: Tue, 14 Jan 2020 08:18:50 +0100
Subject: [PATCH 02/87] TEE-485 drivers: caam: implement NXP CAAM - DH

Add the NXP CAAM driver:
 - DH

Signed-off-by: Cedric Neveux <cedric.neveux@nxp.com>
(cherry picked from commit 1cf2ba5224e64a85453e308fad9860fb2d955de7)
---
 core/arch/arm/plat-imx/crypto_conf.mk         |   4 +-
 core/drivers/crypto/caam/acipher/caam_dh.c    | 531 ++++++++++++++++++
 core/drivers/crypto/caam/acipher/sub.mk       |   1 +
 core/drivers/crypto/caam/caam_ctrl.c          |   7 +
 .../crypto/caam/include/caam_acipher.h        |  16 +-
 .../crypto/caam/include/caam_desc_defines.h   |   7 +-
 core/drivers/crypto/caam/include/caam_trace.h |  26 +-
 7 files changed, 588 insertions(+), 4 deletions(-)
 create mode 100644 core/drivers/crypto/caam/acipher/caam_dh.c

diff --git a/core/arch/arm/plat-imx/crypto_conf.mk b/core/arch/arm/plat-imx/crypto_conf.mk
index 912969c1..75e3c5cd 100644
--- a/core/arch/arm/plat-imx/crypto_conf.mk
+++ b/core/arch/arm/plat-imx/crypto_conf.mk
@@ -22,6 +22,7 @@
 # DBG_RSA    BIT32(11) // RSA trace
 # DBG_MP     BIT32(12) // MP trace
 # DBG_SM     BIT32(13) // Secure Memory trace
+# DBG_DH     BIT32(14) // DH Trace
 CFG_DBG_CAAM_TRACE ?= 0x2
 CFG_DBG_CAAM_DESC ?= 0x0
 CFG_DBG_CAAM_BUF ?= 0x0
@@ -85,10 +86,11 @@ ifneq ($(filter y, $(CFG_MX6QP) $(CFG_MX6Q) $(CFG_MX6D) $(CFG_MX6DL) \
 $(eval $(call cryphw-enable-drv-hw, ECC))
 $(eval $(call cryphw-enable-drv-hw, RSA))
 $(eval $(call cryphw-enable-drv-hw, MP))
+$(eval $(call cryphw-enable-drv-hw, DH))
 CFG_PTA_MP ?= y
 endif
 
-$(call force, CFG_NXP_CAAM_ACIPHER_DRV, $(call cryphw-one-enabled, ECC RSA))
+$(call force, CFG_NXP_CAAM_ACIPHER_DRV, $(call cryphw-one-enabled, ECC RSA DH))
 
 ifeq ($(CFG_IMX_DEK_HAB),y)
 CFG_PTA_DEK ?= y
diff --git a/core/drivers/crypto/caam/acipher/caam_dh.c b/core/drivers/crypto/caam/acipher/caam_dh.c
new file mode 100644
index 00000000..60f76f63
--- /dev/null
+++ b/core/drivers/crypto/caam/acipher/caam_dh.c
@@ -0,0 +1,531 @@
+// SPDX-License-Identifier: BSD-2-Clause
+/*
+ * Copyright 2018-2020 NXP
+ *
+ * Implementation of DH functions
+ */
+#include <caam_acipher.h>
+#include <caam_common.h>
+#include <caam_hal_ctrl.h>
+#include <caam_jr.h>
+#include <caam_utils_mem.h>
+#include <caam_utils_sgt.h>
+#include <caam_utils_status.h>
+#include <drvcrypt.h>
+#include <drvcrypt_acipher.h>
+#include <mm/core_memprot.h>
+#include <tee/cache.h>
+#include <string.h>
+
+/*
+ * Definition of the local DH Keypair
+ */
+struct caam_dh_keypair {
+	struct caambuf g; /* Generator */
+	struct caambuf p; /* Prime Number Modulus */
+	struct caambuf x; /* Private key */
+	struct caambuf y; /* Public key */
+};
+
+/*
+ * Free local DH keypair
+ *
+ * @key  DH keypair
+ */
+static void do_keypair_free(struct caam_dh_keypair *key)
+{
+	caam_free_buf(&key->g);
+	caam_free_buf(&key->p);
+	caam_free_buf(&key->x);
+	caam_free_buf(&key->y);
+}
+
+/*
+ * Convert Crypto DH Key p and g bignumbers to local buffers
+ * (via keypair object).
+ * Ensure buffers are pushed to physical memory
+ *
+ * @outkey    [out] Output keypair in local format
+ * @inkey     Input key in TEE Crypto format
+ */
+static enum caam_status do_keypair_conv_p_g(struct caam_dh_keypair *outkey,
+					    const struct dh_keypair *inkey)
+{
+	enum caam_status retstatus = CAAM_OUT_MEMORY;
+	size_t p_size = 0;
+	size_t field_size = 0;
+
+	p_size = crypto_bignum_num_bytes(inkey->p);
+
+	DH_TRACE("DH Convert Key Parameters (p,g) size %zu bytes", p_size);
+
+	/* Prime Number Modulus */
+	retstatus = caam_calloc_buf(&outkey->p, p_size);
+	if (retstatus != CAAM_NO_ERROR)
+		return CAAM_OUT_MEMORY;
+
+	crypto_bignum_bn2bin(inkey->p, outkey->p.data);
+	cache_operation(TEE_CACHECLEAN, outkey->p.data, outkey->p.length);
+
+	/* Generator */
+	retstatus = caam_calloc_buf(&outkey->g, p_size);
+	if (retstatus != CAAM_NO_ERROR)
+		return CAAM_OUT_MEMORY;
+
+	/* Get the number of bytes of g to pad with 0's */
+	field_size = crypto_bignum_num_bytes(inkey->g);
+	crypto_bignum_bn2bin(inkey->g, outkey->g.data + p_size - field_size);
+	cache_operation(TEE_CACHECLEAN, outkey->g.data, outkey->g.length);
+
+	return CAAM_NO_ERROR;
+}
+
+/*
+ * Convert Crypto DH Private Key to a local Private Key (via keypair object)
+ * Ensure buffers are pushed to physical memory
+ *
+ * @outkey    [out] Output local keypair
+ * @inkey     Input Private key in TEE Crypto format
+ */
+static enum caam_status do_keypriv_conv(struct caam_dh_keypair *outkey,
+					const struct dh_keypair *inkey)
+{
+	enum caam_status retstatus = CAAM_OUT_MEMORY;
+	size_t key_size = inkey->xbits / 8;
+	size_t p_size = 0;
+
+	if (!key_size)
+		key_size = crypto_bignum_num_bytes(inkey->x);
+
+	DH_TRACE("DH Convert Private Key size %zu bytes", key_size);
+
+	/* Prime */
+	p_size = crypto_bignum_num_bytes(inkey->p);
+	retstatus = caam_calloc_buf(&outkey->p, p_size);
+	if (retstatus != CAAM_NO_ERROR)
+		return CAAM_OUT_MEMORY;
+
+	crypto_bignum_bn2bin(inkey->p, outkey->p.data);
+	cache_operation(TEE_CACHECLEAN, outkey->p.data, outkey->p.length);
+
+	/* Private Key X */
+	retstatus = caam_calloc_buf(&outkey->x, key_size);
+	if (retstatus != CAAM_NO_ERROR)
+		return CAAM_OUT_MEMORY;
+
+	crypto_bignum_bn2bin(inkey->x, outkey->x.data);
+	cache_operation(TEE_CACHECLEAN, outkey->x.data, outkey->x.length);
+
+	return CAAM_NO_ERROR;
+}
+
+/*
+ * Convert Crypto DH Public Key to local Public Key (via a keypair object)
+ * Ensure buffers are pushed to physical memory
+ *
+ * @outkey    [out] Output local keypair
+ * @inkey     Input Public key in TEE Crypto format
+ */
+static enum caam_status do_keypub_conv(struct caam_dh_keypair *outkey,
+				       const struct bignum *inkey)
+{
+	enum caam_status retstatus = CAAM_OUT_MEMORY;
+	size_t key_size = 0;
+
+	key_size = crypto_bignum_num_bytes((struct bignum *)inkey);
+	DH_TRACE("DH Convert Keypair size %zu bytes", key_size);
+
+	/* Public Key Y */
+	retstatus = caam_calloc_buf(&outkey->y, key_size);
+	if (retstatus != CAAM_NO_ERROR)
+		return CAAM_OUT_MEMORY;
+
+	crypto_bignum_bn2bin(inkey, outkey->y.data);
+	cache_operation(TEE_CACHECLEAN, outkey->y.data, outkey->y.length);
+
+	return CAAM_NO_ERROR;
+}
+
+/*
+ * Allocate a TEE DH keypair.
+ * Note: The subprime q is not used but it must be allocated to prevent
+ * system crashed when object is destroyed.
+ *
+ * @key        Keypair
+ * @size_bits  Key size in bits
+ */
+static TEE_Result do_allocate_keypair(struct dh_keypair *key, size_t size_bits)
+{
+	DH_TRACE("Allocate Keypair of %zu bits", size_bits);
+
+	/* Initialize the key fields to NULL */
+	memset(key, 0, sizeof(*key));
+
+	/* Allocate Generator Scalar */
+	key->g = crypto_bignum_allocate(size_bits);
+	if (!key->g)
+		goto err_alloc_keypair;
+
+	/* Allocate Prime Number Modulus */
+	key->p = crypto_bignum_allocate(size_bits);
+	if (!key->p)
+		goto err_alloc_keypair;
+
+	/* Allocate Private key X */
+	key->x = crypto_bignum_allocate(size_bits);
+	if (!key->x)
+		goto err_alloc_keypair;
+
+	/* Allocate Public Key Y */
+	key->y = crypto_bignum_allocate(size_bits);
+	if (!key->y)
+		goto err_alloc_keypair;
+
+	/* Allocate Subprime even if not used */
+	key->q = crypto_bignum_allocate(size_bits);
+	if (!key->q)
+		goto err_alloc_keypair;
+
+	return TEE_SUCCESS;
+
+err_alloc_keypair:
+	DH_TRACE("Allocation error");
+
+	crypto_bignum_free(key->g);
+	crypto_bignum_free(key->p);
+	crypto_bignum_free(key->x);
+	crypto_bignum_free(key->y);
+
+	return TEE_ERROR_OUT_OF_MEMORY;
+}
+
+/*
+ * Generates an DH keypair
+ * Keypair @key contains the input prime p and generator g values
+ * The function calculates private x and public y, knowing that the
+ * number of bits of x is either key_size if specified or p size.
+ *
+ * @key        [in/out] Keypair
+ * @q          Sub Prime (not used)
+ * @key_size   Key size in bits multiple of 8 bits
+ */
+static TEE_Result do_gen_keypair(struct dh_keypair *key,
+				 struct bignum *q __unused, size_t key_size)
+{
+	TEE_Result ret = TEE_ERROR_GENERIC;
+	enum caam_status retstatus = CAAM_FAILURE;
+	struct caam_dh_keypair caam_dh_key = {};
+	struct caambuf dh_r = {};
+	size_t n_bytes = key_size / 8;
+	size_t l_bytes = 0;
+	struct caam_jobctx jobctx = {};
+	uint32_t *desc = NULL;
+	uint32_t desclen = 0;
+	int counter = 0;
+
+#ifdef CFG_CAAM_64BIT
+#define MAX_DESC_KEY_GEN 14
+#else
+#define MAX_DESC_KEY_GEN 9
+#endif
+	l_bytes = crypto_bignum_num_bytes(key->p);
+	if (!l_bytes)
+		return TEE_ERROR_BAD_PARAMETERS;
+
+	/*
+	 * If @key_size not specified, private key size is
+	 * same as the public key size (same as prime size)
+	 */
+	if (!n_bytes)
+		n_bytes = l_bytes;
+
+	/*
+	 * CAAM private key support is limited to the descriptor PDB
+	 * N maximum value (PDB_DL_KEY_N_MASK)
+	 */
+	if (n_bytes > PDB_DL_KEY_N_MASK)
+		n_bytes = PDB_DL_KEY_N_MASK;
+
+	DH_TRACE("Request %zu bits key -> so do %zu bytes key", key_size,
+		 n_bytes);
+
+	/* Allocate the job used to prepare the operation */
+	desc = caam_calloc_desc(MAX_DESC_KEY_GEN);
+	if (!desc) {
+		ret = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+
+	/* Allocate Private Key to be generated */
+	retstatus = caam_calloc_align_buf(&caam_dh_key.x, n_bytes);
+	if (retstatus != CAAM_NO_ERROR) {
+		ret = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+	cache_operation(TEE_CACHEFLUSH, caam_dh_key.x.data,
+			caam_dh_key.x.length);
+
+	/* Allocate Public Key to be generated */
+	retstatus = caam_calloc_align_buf(&caam_dh_key.y, l_bytes);
+	if (retstatus != CAAM_NO_ERROR) {
+		ret = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+	cache_operation(TEE_CACHEFLUSH, caam_dh_key.y.data,
+			caam_dh_key.y.length);
+
+	/* Allocate Private Key modulus (r) and fill it with one's */
+	retstatus = caam_calloc_buf(&dh_r, n_bytes);
+	if (retstatus != CAAM_NO_ERROR) {
+		ret = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+
+	memset(dh_r.data, UINT8_MAX, dh_r.length);
+	cache_operation(TEE_CACHECLEAN, dh_r.data, dh_r.length);
+
+	/* Generator and Prime */
+	retstatus = do_keypair_conv_p_g(&caam_dh_key, key);
+	if (retstatus != CAAM_NO_ERROR) {
+		ret = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+
+	/*
+	 * Build the descriptor using the PDB Public Key generation
+	 * block (PD=0)
+	 */
+	caam_desc_init(desc);
+	caam_desc_add_word(desc, DESC_HEADER(0));
+	caam_desc_add_word(desc, PDB_DL_KEY_L_SIZE(l_bytes) |
+					 PDB_DL_KEY_N_SIZE(n_bytes));
+	caam_desc_add_ptr(desc, caam_dh_key.p.paddr);
+	caam_desc_add_ptr(desc, dh_r.paddr);
+	caam_desc_add_ptr(desc, caam_dh_key.g.paddr);
+	caam_desc_add_ptr(desc, caam_dh_key.x.paddr);
+	caam_desc_add_ptr(desc, caam_dh_key.y.paddr);
+	caam_desc_add_word(desc, PK_KEYPAIR_GEN(DL));
+
+	desclen = caam_desc_get_len(desc);
+	caam_desc_update_hdr(desc, DESC_HEADER_IDX(desclen, desclen - 1));
+
+	DH_DUMPDESC(desc);
+
+	/*
+	 * If the Secure Key X doesn't have the correct size
+	 * retry a new generation.
+	 * Retry 10 times before returing an error to not lock the system.
+	 */
+	for (; counter < 10; counter++) {
+		memset(&jobctx, 0, sizeof(jobctx));
+		jobctx.desc = desc;
+		retstatus = caam_jr_enqueue(&jobctx, NULL);
+
+		if (retstatus == CAAM_NO_ERROR) {
+			cache_operation(TEE_CACHEINVALIDATE, caam_dh_key.x.data,
+					caam_dh_key.x.length);
+			cache_operation(TEE_CACHEINVALIDATE, caam_dh_key.y.data,
+					caam_dh_key.y.length);
+
+			/* Copy Private and Public keypair */
+			ret = crypto_bignum_bin2bn(caam_dh_key.x.data,
+						   caam_dh_key.x.length,
+						   key->x);
+			if (ret != TEE_SUCCESS)
+				goto out;
+
+			if (crypto_bignum_num_bytes(key->x) != n_bytes) {
+				DH_TRACE("Error X size=%zu expected %zu",
+					 crypto_bignum_num_bytes(key->x),
+					 n_bytes);
+				DH_DUMPBUF("X", caam_dh_key.x.data,
+					   caam_dh_key.x.length);
+				DH_DUMPBUF("Y", caam_dh_key.y.data,
+					   caam_dh_key.y.length);
+				continue;
+			}
+
+			ret = crypto_bignum_bin2bn(caam_dh_key.y.data,
+						   caam_dh_key.y.length,
+						   key->y);
+			if (ret != TEE_SUCCESS)
+				goto out;
+
+			/* Set the Private Key size in bits */
+			key->xbits = n_bytes * 8;
+
+			ret = TEE_SUCCESS;
+			goto out;
+		} else {
+			DH_TRACE("CAAM Status 0x%08" PRIx32, jobctx.status);
+			ret = job_status_to_tee_result(jobctx.status);
+			goto out;
+		}
+	}
+
+out:
+	caam_free_desc(&desc);
+	caam_free_buf(&dh_r);
+	do_keypair_free(&caam_dh_key);
+
+	return ret;
+}
+
+/*
+ * Compute the shared secret data from DH Private key and Public Key
+ *
+ * @sdata   [in/out] DH Shared Secret data
+ */
+static TEE_Result do_shared_secret(struct drvcrypt_secret_data *sdata)
+{
+	TEE_Result ret = TEE_ERROR_GENERIC;
+	enum caam_status retstatus = CAAM_FAILURE;
+	struct dh_keypair *inkeypair = sdata->key_priv;
+	struct caam_dh_keypair caam_dh_key = {};
+	struct caambuf secret_align = {};
+	struct caamsgtbuf sgt_secret = { .sgt_type = false };
+	paddr_t paddr_secret = 0;
+	int realloc = 0;
+	struct caam_jobctx jobctx = {};
+	uint32_t *desc = NULL;
+	uint32_t desclen = 0;
+	uint32_t pdb_sgt_flags = 0;
+
+#ifdef CFG_CAAM_64BIT
+#define MAX_DESC_SHARED 14
+#else
+#define MAX_DESC_SHARED 9
+#endif
+	DH_TRACE("DH Shared Secret");
+
+	/* Allocate the job descriptor */
+	desc = caam_calloc_desc(MAX_DESC_SHARED);
+	if (!desc) {
+		ret = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+
+	/*
+	 * ReAllocate the secret result buffer with a maximum size
+	 * of the secret size if not cache aligned
+	 */
+	realloc = caam_set_or_alloc_align_buf(sdata->secret.data, &secret_align,
+					      sdata->secret.length);
+	if (realloc == -1) {
+		ret = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+
+	retstatus = caam_sgt_build_block_data(&sgt_secret, NULL, &secret_align);
+	if (retstatus != CAAM_NO_ERROR) {
+		ret = TEE_ERROR_GENERIC;
+		goto out;
+	}
+
+	if (sgt_secret.sgt_type) {
+		pdb_sgt_flags |= PDB_SGT_PKDH_SECRET;
+		paddr_secret = virt_to_phys(sgt_secret.sgt);
+		caam_sgt_cache_op(TEE_CACHEFLUSH, &sgt_secret);
+	} else {
+		paddr_secret = sgt_secret.buf->paddr;
+		if (!sgt_secret.buf->nocache)
+			cache_operation(TEE_CACHEFLUSH, sgt_secret.buf->data,
+					sgt_secret.length);
+	}
+
+	/* Convert the Private key to local key */
+	retstatus = do_keypriv_conv(&caam_dh_key, inkeypair);
+	if (retstatus != CAAM_NO_ERROR) {
+		ret = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+
+	/* Convert the Public key to local key */
+	retstatus = do_keypub_conv(&caam_dh_key, sdata->key_pub);
+	if (retstatus != CAAM_NO_ERROR) {
+		ret = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+
+	/*
+	 * Build the descriptor using PDB Shared Secret
+	 */
+	caam_desc_init(desc);
+	caam_desc_add_word(desc, DESC_HEADER(0));
+	caam_desc_add_word(desc,
+			   pdb_sgt_flags |
+				   PDB_DL_KEY_L_SIZE(caam_dh_key.y.length) |
+				   PDB_DL_KEY_N_SIZE(caam_dh_key.x.length));
+	/* Prime */
+	caam_desc_add_ptr(desc, caam_dh_key.p.paddr);
+	/* Modulus - Not used */
+	caam_desc_add_ptr(desc, 0);
+	/* Public key */
+	caam_desc_add_ptr(desc, caam_dh_key.y.paddr);
+	/* Private key */
+	caam_desc_add_ptr(desc, caam_dh_key.x.paddr);
+	/* Output secret */
+	caam_desc_add_ptr(desc, paddr_secret);
+
+	caam_desc_add_word(desc, SHARED_SECRET(DL));
+	desclen = caam_desc_get_len(desc);
+	caam_desc_update_hdr(desc, DESC_HEADER_IDX(desclen, desclen - 1));
+
+	DH_DUMPDESC(desc);
+	jobctx.desc = desc;
+
+	retstatus = caam_jr_enqueue(&jobctx, NULL);
+
+	if (retstatus == CAAM_NO_ERROR) {
+		if (!secret_align.nocache)
+			cache_operation(TEE_CACHEINVALIDATE, secret_align.data,
+					secret_align.length);
+		if (realloc == 1)
+			memcpy(sdata->secret.data, secret_align.data,
+			       secret_align.length);
+
+		DH_DUMPBUF("Secret", sdata->secret.data, sdata->secret.length);
+
+		ret = TEE_SUCCESS;
+	} else {
+		DH_TRACE("CAAM Status 0x%08" PRIx32, jobctx.status);
+		ret = job_status_to_tee_result(jobctx.status);
+	}
+
+out:
+	caam_free_desc(&desc);
+	do_keypair_free(&caam_dh_key);
+
+	if (realloc == 1)
+		caam_free_buf(&secret_align);
+
+	if (sgt_secret.sgt_type)
+		caam_sgtbuf_free(&sgt_secret);
+
+	return ret;
+}
+
+/*
+ * Registration of the ECC Driver
+ */
+static struct drvcrypt_dh driver_dh = {
+	.alloc_keypair = do_allocate_keypair,
+	.gen_keypair = do_gen_keypair,
+	.shared_secret = do_shared_secret,
+};
+
+/*
+ * Initialize the DH module
+ *
+ * @ctrl_addr   Controller base address
+ */
+enum caam_status caam_dh_init(vaddr_t ctrl_addr)
+{
+	enum caam_status retstatus = CAAM_FAILURE;
+
+	if (caam_hal_ctrl_pknum(ctrl_addr))
+		if (drvcrypt_register_dh(&driver_dh) == TEE_SUCCESS)
+			retstatus = CAAM_NO_ERROR;
+
+	return retstatus;
+}
diff --git a/core/drivers/crypto/caam/acipher/sub.mk b/core/drivers/crypto/caam/acipher/sub.mk
index ddc55a38..47d9229a 100644
--- a/core/drivers/crypto/caam/acipher/sub.mk
+++ b/core/drivers/crypto/caam/acipher/sub.mk
@@ -2,4 +2,5 @@ incdirs-y += ../include
 
 srcs-$(CFG_NXP_CAAM_ECC_DRV) += caam_ecc.c
 srcs-$(CFG_NXP_CAAM_RSA_DRV) += caam_rsa.c
+srcs-$(CFG_NXP_CAAM_DH_DRV)  += caam_dh.c
 srcs-y += caam_prime.c caam_math.c
diff --git a/core/drivers/crypto/caam/caam_ctrl.c b/core/drivers/crypto/caam/caam_ctrl.c
index 0bd87a98..bb502edd 100644
--- a/core/drivers/crypto/caam/caam_ctrl.c
+++ b/core/drivers/crypto/caam/caam_ctrl.c
@@ -125,6 +125,13 @@ TEE_Result crypto_driver_init(void)
 		goto exit_init;
 	}
 
+	/* Initialize the DH Module */
+	retstatus = caam_dh_init(jrcfg.base);
+	if (retstatus != CAAM_NO_ERROR) {
+		retresult = TEE_ERROR_GENERIC;
+		goto exit_init;
+	}
+
 	/* Everything is OK, register the Power Management handler */
 	caam_pwr_init();
 
diff --git a/core/drivers/crypto/caam/include/caam_acipher.h b/core/drivers/crypto/caam/include/caam_acipher.h
index bef77b39..b96c3467 100644
--- a/core/drivers/crypto/caam/include/caam_acipher.h
+++ b/core/drivers/crypto/caam/include/caam_acipher.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: BSD-2-Clause */
 /*
- * Copyright 2018-209 NXP
+ * Copyright 2018-2020 NXP
  *
  * Brief   CAAM Asymmetric Cipher manager header.
  */
@@ -37,6 +37,20 @@ static inline enum caam_status caam_rsa_init(vaddr_t ctrl_addr __unused)
 }
 #endif /* CFG_NXP_CAAM_RSA_DRV */
 
+#ifdef CFG_NXP_CAAM_DH_DRV
+/*
+ * Initialize the DH module
+ *
+ * @ctrl_addr   Controller base address
+ */
+enum caam_status caam_dh_init(vaddr_t ctrl_addr);
+#else
+static inline enum caam_status caam_dh_init(vaddr_t ctrl_addr __unused)
+{
+	return CAAM_NO_ERROR;
+}
+#endif /* CFG_NXP_CAAM_DH_DRV */
+
 #ifdef CFG_NXP_CAAM_ACIPHER_DRV
 /*
  * Initialize the MATH module
diff --git a/core/drivers/crypto/caam/include/caam_desc_defines.h b/core/drivers/crypto/caam/include/caam_desc_defines.h
index c8f16889..54a7dc3e 100644
--- a/core/drivers/crypto/caam/include/caam_desc_defines.h
+++ b/core/drivers/crypto/caam/include/caam_desc_defines.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: BSD-2-Clause */
 /*
- * Copyright 2018-2019 NXP
+ * Copyright 2018-2020 NXP
  *
  * Brief   CAAM Descriptor defines.
  */
@@ -659,6 +659,11 @@
 /* SGT Flags Shared Secret */
 #define PDB_SGT_PKDH_SECRET	SHIFT_U32(1, 27)
 
+/* DL Keypair Generation */
+#define PDB_DL_KEY_L_SIZE(len) SHIFT_U32((len) & (0x3FF), 7)
+#define PDB_DL_KEY_N_MASK      0x7F
+#define PDB_DL_KEY_N_SIZE(len) SHIFT_U32((len) & (PDB_DL_KEY_N_MASK), 0)
+
 /* ECC Domain Selection */
 #define PDB_ECC_ECDSEL(curve)	SHIFT_U32((curve) & 0x3F, 7)
 
diff --git a/core/drivers/crypto/caam/include/caam_trace.h b/core/drivers/crypto/caam/include/caam_trace.h
index d544878c..60ffc366 100644
--- a/core/drivers/crypto/caam/include/caam_trace.h
+++ b/core/drivers/crypto/caam/include/caam_trace.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: BSD-2-Clause */
 /*
- * Copyright 2019 NXP
+ * Copyright 2019-2020 NXP
  *
  * Brief   CAAM driver trace include file.
  *         Definition of the internal driver trace macros.
@@ -39,6 +39,7 @@
 #define DBG_TRACE_RSA	 BIT32(11) /* RSA trace */
 #define DBG_TRACE_MP	 BIT32(12) /* MP trace */
 #define DBG_TRACE_SM	 BIT32(13) /* Secure Memory trace */
+#define DBG_TRACE_DH	 BIT32(14) /* DH trace */
 
 /* HAL */
 #if CAAM_DBG_TRACE(HAL)
@@ -254,6 +255,29 @@
 #define SM_TRACE(...)
 #endif
 
+/* DH */
+#if CAAM_DBG_TRACE(DH)
+#define DH_TRACE DRV_TRACE
+#if CAAM_DBG_DESC(DH)
+#define DH_DUMPDESC(desc)                                                      \
+	{                                                                      \
+		DH_TRACE("DH Descriptor");                                     \
+		DRV_DUMPDESC(desc);                                            \
+	}
+#else
+#define DH_DUMPDESC(desc)
+#endif
+#if CAAM_DBG_BUF(DH)
+#define DH_DUMPBUF DRV_DUMPBUF
+#else
+#define DH_DUMPBUF(...)
+#endif
+#else
+#define DH_TRACE(...)
+#define DH_DUMPDESC(desc)
+#define DH_DUMPBUF(...)
+#endif
+
 #if (TRACE_LEVEL >= TRACE_DEBUG)
 #define DRV_TRACE(...)                                                         \
 	trace_printf(__func__, __LINE__, TRACE_DEBUG, true, __VA_ARGS__)
-- 
2.17.1

