From 3620c0b8e11db7180263953c8cee3585cc901a2b Mon Sep 17 00:00:00 2001
From: Silvano di Ninno <silvano.dininno@nxp.com>
Date: Tue, 26 Feb 2019 16:56:16 +0100
Subject: [PATCH 04/10] optee: rpmb: fix access to physical RPMB partition

import code from mmc-utils code from linux
and replace optee-client implementation
with this one.

Signed-off-by: Silvano di Ninno <silvano.dininno@nxp.com>
---
 tee-supplicant/src/rpmb.c | 147 +++++++++++++++++++++-----------------
 1 file changed, 83 insertions(+), 64 deletions(-)

diff --git a/tee-supplicant/src/rpmb.c b/tee-supplicant/src/rpmb.c
index c90c049..3246cd9 100644
--- a/tee-supplicant/src/rpmb.c
+++ b/tee-supplicant/src/rpmb.c
@@ -106,6 +106,7 @@ struct rpmb_data_frame {
 #define RPMB_MSG_TYPE_RESP_AUTH_DATA_READ		0x0400
 };
 
+#define RPMB_MULTI_CMD_MAX_CMDS 3
 
 static pthread_mutex_t rpmb_mutex = PTHREAD_MUTEX_INITIALIZER;
 
@@ -131,9 +132,27 @@ static pthread_mutex_t rpmb_mutex = PTHREAD_MUTEX_INITIALIZER;
 
 #define MMC_CMD_ADTC	(1 << 5)	/* Addressed data transfer command */
 
+#define MMC_RSP_SPI_S1	(1 << 7)		/* one status byte */
+#define MMC_RSP_SPI_BUSY (1 << 10)		/* card may send busy */
+
+#define MMC_RSP_SPI_R1	(MMC_RSP_SPI_S1)
+#define MMC_RSP_SPI_R1B	(MMC_RSP_SPI_S1|MMC_RSP_SPI_BUSY)
+
 /* mmc_ioc_cmd.write_flag */
 #define MMC_CMD23_ARG_REL_WR	(1 << 31) /* CMD23 reliable write */
 
+
+static inline void set_single_cmd(struct mmc_ioc_cmd *ioc, __u32 opcode,
+				  int write_flag, unsigned int blocks)
+{
+	ioc->opcode = opcode;
+	ioc->write_flag = write_flag;
+	ioc->arg = 0x0;
+	ioc->blksz = 512;
+	ioc->blocks = blocks;
+	ioc->flags = MMC_RSP_SPI_R1 | MMC_RSP_R1 | MMC_CMD_ADTC;
+}
+
 #ifndef RPMB_EMU
 
 #define IOCTL(fd, request, ...)					   \
@@ -156,7 +175,7 @@ static int mmc_rpmb_fd(uint16_t dev_id)
 	DMSG("dev_id = %u", dev_id);
 	if (fd < 0) {
 #ifdef __ANDROID__
-		snprintf(path, sizeof(path), "/dev/mmcblk%urpmb", dev_id);
+		snprintf(path, sizeof(path), "/dev/block/mmcblk%urpmb", dev_id);
 #else
 		snprintf(path, sizeof(path), "/dev/mmcblk%urpmb", dev_id);
 #endif
@@ -629,17 +648,17 @@ static uint32_t rpmb_data_req(int fd, struct rpmb_data_frame *req_frm,
 	int st = 0;
 	size_t i = 0;
 	uint16_t msg_type = ntohs(req_frm->msg_type);
-	struct mmc_ioc_cmd cmd = {
-		.blksz = 512,
-		.blocks = req_nfrm,
-		.data_ptr = (uintptr_t)req_frm,
-		.flags = MMC_RSP_R1 | MMC_CMD_ADTC,
-		.opcode = MMC_WRITE_MULTIPLE_BLOCK,
-		.write_flag = 1,
-	};
+	struct mmc_ioc_multi_cmd *mioc;
+	struct mmc_ioc_cmd *ioc;
+	struct rpmb_data_frame frame_status = {{ 0 }, { 0 }, { 0 }, { 0 }, 0, 0, 0, 0, 0};
+	int err;
+
+	if (!req_frm || !rsp_frm || !rsp_nfrm)
+		return TEEC_ERROR_BAD_PARAMETERS;
 
 	for (i = 1; i < req_nfrm; i++) {
 		if (req_frm[i].msg_type != msg_type) {
+			// This looks buggy
 			EMSG("All request frames shall be of the same type");
 			return TEEC_ERROR_BAD_PARAMETERS;
 		}
@@ -647,85 +666,85 @@ static uint32_t rpmb_data_req(int fd, struct rpmb_data_frame *req_frm,
 
 	DMSG("Req: %zu frame(s) of type 0x%04x", req_nfrm, msg_type);
 	DMSG("Rsp: %zu frame(s)", rsp_nfrm);
+	
+	/* prepare arguments for MMC_IOC_MULTI_CMD ioctl */
+	mioc = (struct mmc_ioc_multi_cmd *)
+		malloc(sizeof (struct mmc_ioc_multi_cmd) +
+		       RPMB_MULTI_CMD_MAX_CMDS * sizeof (struct mmc_ioc_cmd));
+	if (!mioc) {
+		return TEEC_ERROR_BAD_PARAMETERS;
+	}
 
 	switch(msg_type) {
 	case RPMB_MSG_TYPE_REQ_AUTH_KEY_PROGRAM:
 	case RPMB_MSG_TYPE_REQ_AUTH_DATA_WRITE:
 		if (rsp_nfrm != 1) {
 			EMSG("Expected only one response frame");
-			return TEEC_ERROR_BAD_PARAMETERS;
+			err = TEEC_ERROR_BAD_PARAMETERS;
+			goto out;
 		}
 
-		/* Send write request frame(s) */
-		cmd.write_flag |= MMC_CMD23_ARG_REL_WR;
-		/*
-		 * Black magic: tested on a HiKey board with a HardKernel eMMC
-		 * module. When postsleep values are zero, the kernel logs
-		 * random errors: "mmc_blk_ioctl_cmd: Card Status=0x00000E00"
-		 * and ioctl() fails.
-		 */
-		cmd.postsleep_min_us = 20000;
-		cmd.postsleep_max_us = 50000;
-		st = IOCTL(fd, MMC_IOC_CMD, &cmd);
-		if (st < 0)
-			return TEEC_ERROR_GENERIC;
-		cmd.postsleep_min_us = 0;
-		cmd.postsleep_max_us = 0;
-
-		/* Send result request frame */
-		memset(rsp_frm, 0, 1);
-		rsp_frm->msg_type = htons(RPMB_MSG_TYPE_REQ_RESULT_READ);
-		cmd.data_ptr = (uintptr_t)rsp_frm;
-		cmd.write_flag &= ~MMC_CMD23_ARG_REL_WR;
-		st = IOCTL(fd, MMC_IOC_CMD, &cmd);
-		if (st < 0)
-			return TEEC_ERROR_GENERIC;
-
-		/* Read response frame */
-		cmd.opcode = MMC_READ_MULTIPLE_BLOCK;
-		cmd.write_flag = 0;
-		cmd.blocks = rsp_nfrm;
-		st = IOCTL(fd, MMC_IOC_CMD, &cmd);
-		if (st < 0)
-			return TEEC_ERROR_GENERIC;
-		break;
+		mioc->num_of_cmds = 3;
+
+		/* Write request */
+		ioc = &mioc->cmds[0];
+		set_single_cmd(ioc, MMC_WRITE_MULTIPLE_BLOCK, MMC_CMD23_ARG_REL_WR | 1, req_nfrm);
+		mmc_ioc_cmd_set_data((*ioc), req_frm);
+
+		/* Result request */
+		ioc = &mioc->cmds[1];
+		frame_status.msg_type = htons(RPMB_MSG_TYPE_REQ_RESULT_READ);
+		set_single_cmd(ioc, MMC_WRITE_MULTIPLE_BLOCK, 1, 1);
+		mmc_ioc_cmd_set_data((*ioc), &frame_status);
+
+		/* Get response */
+		ioc = &mioc->cmds[2];
+		set_single_cmd(ioc, MMC_READ_MULTIPLE_BLOCK, 0, rsp_nfrm);
+		mmc_ioc_cmd_set_data((*ioc), rsp_frm);
 
+		break;
 	case RPMB_MSG_TYPE_REQ_WRITE_COUNTER_VAL_READ:
 		if (rsp_nfrm != 1) {
 			EMSG("Expected only one response frame");
-			return TEEC_ERROR_BAD_PARAMETERS;
+			err = TEEC_ERROR_BAD_PARAMETERS;
+			goto out;
 		}
 #if __GNUC__ > 6
 		__attribute__((fallthrough));
 #endif
 
+		/* Fall through */
 	case RPMB_MSG_TYPE_REQ_AUTH_DATA_READ:
-		if (req_nfrm != 1) {
-			EMSG("Expected only one request frame");
-			return TEEC_ERROR_BAD_PARAMETERS;
-		}
+		mioc->num_of_cmds = 2;
+
+		/* Read request */
+		ioc = &mioc->cmds[0];
+		set_single_cmd(ioc, MMC_WRITE_MULTIPLE_BLOCK, 1, req_nfrm);
+		mmc_ioc_cmd_set_data((*ioc), req_frm);
 
-		/* Send request frame */
-		st = IOCTL(fd, MMC_IOC_CMD, &cmd);
-		if (st < 0)
-			return TEEC_ERROR_GENERIC;
-
-		/* Read response frames */
-		cmd.data_ptr = (uintptr_t)rsp_frm;
-		cmd.opcode = MMC_READ_MULTIPLE_BLOCK;
-		cmd.write_flag = 0;
-		cmd.blocks = rsp_nfrm;
-		st = IOCTL(fd, MMC_IOC_CMD, &cmd);
-		if (st < 0)
-			return TEEC_ERROR_GENERIC;
-		break;
 
+		/* Get response */
+		ioc = &mioc->cmds[1];
+		set_single_cmd(ioc, MMC_READ_MULTIPLE_BLOCK, 0, rsp_nfrm);
+		mmc_ioc_cmd_set_data((*ioc), rsp_frm);
+		break;
 	default:
 		EMSG("Unsupported message type: %d", msg_type);
-		return TEEC_ERROR_GENERIC;
+		err = TEEC_ERROR_GENERIC;
+		goto out;
 	}
 
-	return TEEC_SUCCESS;
+
+	st = ioctl(fd, MMC_IOC_MULTI_CMD, mioc);
+	if (st < 0) {
+		err = TEEC_ERROR_GENERIC;
+		goto out;
+	}
+
+	err = TEEC_SUCCESS;
+out:
+	free(mioc);
+	return err;
 }
 
 static uint32_t rpmb_get_dev_info(uint16_t dev_id, struct rpmb_dev_info *info)
-- 
2.17.1

